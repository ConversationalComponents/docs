{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is CoCo? Conversational Components make chatbot building easier by deconstructing conversations into components. All components hold context over multiple turns of conversation to better engage your users, with logic wired into the conversational flow. All you have to do is incorporate them into your bots. It\u2019s time to make the development of conversational A.I. a collaborative process. When you build on reusable and customizable parts, you create better chatbots to make conversation easy. You\u2019ll be able to stack a conversation with pre-built dialogue blocks. Each of these blocks maintains user context throughout the conversation. They\u2019re also reusable and customizable, saving you precious time by eliminating the need to create a dialogue management system from scratch for every new bot you build. And the best part? CoCos are simple to implement into any bot framework! For Chatbot Developers It's really easy to use Conversational Components in your chatbots. With CoCo, you can call components through a simple unified, REST format that is easy to embed in your chatbot. Moreover, you can view all of the components you are using in your user profile, which monitors the number of API requests, latency, and error rates, among other metrics. For more on using components, check out the Basics - Your First Component Call section or our CoCos for Developers page. For Component Vendors If you\u2019ve already built excellent components of your own, we make it simple for you to distribute and monetize it. Adding your component to CoCo's Marketplace offers you several benefits. You\u2019ll get instant exposure to our growing user base, a search-engine-optimized profile page for your component, as well as features like user management and billing services. For more on adding your component, visit our Adding & Managing components - Getting Started section or check out our Components Providers page.","title":"About"},{"location":"#what-is-coco","text":"Conversational Components make chatbot building easier by deconstructing conversations into components. All components hold context over multiple turns of conversation to better engage your users, with logic wired into the conversational flow. All you have to do is incorporate them into your bots. It\u2019s time to make the development of conversational A.I. a collaborative process. When you build on reusable and customizable parts, you create better chatbots to make conversation easy. You\u2019ll be able to stack a conversation with pre-built dialogue blocks. Each of these blocks maintains user context throughout the conversation. They\u2019re also reusable and customizable, saving you precious time by eliminating the need to create a dialogue management system from scratch for every new bot you build. And the best part? CoCos are simple to implement into any bot framework!","title":"What is CoCo?"},{"location":"#for-chatbot-developers","text":"It's really easy to use Conversational Components in your chatbots. With CoCo, you can call components through a simple unified, REST format that is easy to embed in your chatbot. Moreover, you can view all of the components you are using in your user profile, which monitors the number of API requests, latency, and error rates, among other metrics. For more on using components, check out the Basics - Your First Component Call section or our CoCos for Developers page.","title":"For Chatbot Developers"},{"location":"#for-component-vendors","text":"If you\u2019ve already built excellent components of your own, we make it simple for you to distribute and monetize it. Adding your component to CoCo's Marketplace offers you several benefits. You\u2019ll get instant exposure to our growing user base, a search-engine-optimized profile page for your component, as well as features like user management and billing services. For more on adding your component, visit our Adding & Managing components - Getting Started section or check out our Components Providers page.","title":"For Component Vendors"},{"location":"CCML/","text":"CCML => CoCo Speech Synthesis Markup Language A cross platform speech synthesis markup language. <break> Set pause at the conversation. Channels Supported Phone Amazon Alexa Google Assistant ZOOM Attributes strength - none: Remove a pause. x-weak: Remove a pause same as none. weak: Treat adjacent words as if separated by a single comma (equivalent to medium). medium: Treat adjacent words as if separated by a single comma. strong: Make a sentence break. x-strong: Make a paragraph break. time - Sets the length of the break by seconds or milliseconds (e.g. \"3s\" or \"250ms\"). Example Lakritz is tasty <break time=\"3s\"/> Nooot! <say-as> The tag lets you indicate information about the type of text construct that is contained within the tag. Channels Supported Phone Amazon Alexa Google Assistant ZOOM Attributes interpret-as - characters, spell-out: Spell out each letter. cardinal, number: Interpret the value as a cardinal number. ordinal: Interpret the value as an ordinal number. fraction: Interpret the value as a fraction. This works for both common fractions (such as 3/20) and mixed fractions (such as 1+1/2). unit: Interpret a value as a measurement. The value should be either a number or fraction followed by a unit (with no space in between) or just a unit. date: Interpret the value as a date. Specify the format with the format attribute. time: Interpret a value such as 1'21\" as duration in minutes and seconds. telephone: Interpret a value as a 7-digit or 10-digit telephone number. This can also handle extensions (for example, 2025551212x345). expletive: \"Bleep\" out the content inside the tag. Example <say-as interpret-as=\"cardinal\">12345</say-as> <p> Represents a paragraph in speech. Channels Supported Phone Amazon Alexa Google Assistant ZOOM Example <p>This is the first paragraph.</p> <p>This is the second paragraph.</p> <s> Represents a sentence in speech. Channels Supported Phone Amazon Alexa Google Assistant ZOOM Example <s>This is the first sentence.</s> <s>This is the second sentence.</s> <prosody> Used to customize the pitch, speaking rate, and volume of text contained by the element. Channels Supported Phone Amazon Alexa Google Assistant ZOOM Attributes rate - Modify the rate of the speech - slow medium fast pitch - Raise or lower the tone (pitch) of the speech - slow medium fast volume - Change the volume for the speech - silent x-soft soft medium loud x-loud Example <prosody volume=\"x-loud\">Louder volume for this sentence.</prosody>. <prosody rate=\"slow\">I speak quite slowly</prosody>. <emphasis> Emphasis changes rate and volume of the speech. More emphasis is spoken louder and slower. Less emphasis is quieter and faster. Channels Supported Phone Amazon Alexa Google Assistant ZOOM Attributes level - strong: Increase the volume and slow down the speaking rate so the speech is louder and slower. moderate: Increase the volume and slow down the speaking rate, but not as much as when set to strong. This is used as a default if level is not provided. reduced: Decrease the volume and speed up the speaking rate. The speech is softer and faster. Example Hey you, <emphasis level=\"strong\">come here!</emphasis> <sub> Indicate that the text in the alias attribute value replaces the contained text for pronunciation. Channels Supported Phone Amazon Alexa Google Assistant ZOOM Attributes alias - The word or phrase to speak in place of the tagged text. Example <sub alias=\"Speech Synthesis Markup Language\">ssml</sub> <phoneme> Provides a phonemic/phonetic pronunciation for the contained text. People may pronounce some words differently. Channels Supported Phone Amazon Alexa ZOOM Attributes and Examples Amazon Alexa phoneme tag description <voice> Use the voice tag to speak the text with the specified Amazon Polly voice. Channels Supported Phone Amazon Alexa ZOOM Attributes name - Polly voice ID ( List of voice IDs ) Example <voice name=\"Amy\">My name is Amy, darling.</voice>. <language> Use language to specify the language model and rules to speak the tagged content as if it were written in the language specified by the xml:lang attribute. Channels Supported Phone Amazon Alexa ZOOM Attributes xml:lang - de-DE en-AU en-CA en-GB en-IN en-US es-ES es-MX es-US fr-CA fr-FR hi-IN it-IT ja-JP pt-BR Example <language xml:lang=\"fr-FR\">J'adore chanter</language> <part-of-speech> Similar to say-as, this tag customizes the pronunciation of words by specifying the word's part of speech. Channels Supported Phone Amazon Alexa ZOOM Attributes role - amazon:VB: Interpret the word as a verb (present simple). amazon:VBD: Interpret the word as a past participle. amazon:NN: Interpret the word as a noun. Example I really like to <part-of-speech role=\"amazon:VB\">eat</part-of-speech> pizza. <domain> Applies different speaking styles to the speech. The styles are curated text-to-speech voices that use different variations of intonation, emphasis, pausing, and other techniques to match the speech to the content. Channels Supported Amazon Alexa ZOOM Attributes name - conversational \u2013 Style voices to sound more conversational and less formal, more like how people sound when they speak to friends and family. The conversational style is available in English (US), Italian (IT), and Japanese (JP) skills. You can also use this style with Amazon Polly voices. For Amazon Polly, conversational requires the <voice> tag and the Matthew or Joanna voices. long-form \u2013 Style the speech for long-form content such as podcasts, articles, and blogs. The long-form style can't be used with the voice tag. The long-form style is available in English (US) skills. music \u2013 Style the speech for talking about music, video, or other multi-media content. The music style can't be used with the voice tag. The music style is available in English (US), English (CA), and English (UK) skills. news \u2013 Style the speech similar to what you hear when listening to the news on the radio or television. The news style can be combined with the voice tag and the Matthew, Joanna, and Lupe voices. The news style is available in English (US) and English (AU) skills. Example <domain name=\"news\"> Here are the latest new about conversational AI and voice. </domain> <effect> Applies specific effects to the speech. Channels Supported Amazon Alexa ZOOM Attributes name - whispered - Applies a whispering effect to the speech. Example <effect name=\"whispered\">I am whispering this.</effect> <emotion> The emotion tag causes Alexa to express emotion when speaking. Channels Supported Amazon Alexa ZOOM Attributes name - The name of the emotion to apply to the speech. - excited disappointed intensity - The intensity or strength of the emotion to express. - low medium high Example <emotion name=\"excited\" intensity=\"high\"> This is unbelievable! </emotion> <speak> This is the root element of an SSML document. Channels Supported Amazon Alexa Google Assistant ZOOM Example <speak> SSML content </speak> <audio> The audio tag lets you provide the URL for an MP3 file that the service can play while rendering a response. Channels Supported Amazon Alexa Google Assistant ZOOM Attributes src - A URI referring to the audio media source. Supported protocol is https. Example <audio src=\"https://some-url.com/soundfile.mp3\" /> <mark> An empty element that places a marker into the text or tag sequence. It can be used to reference a specific location in the sequence or to insert a marker into an output stream for asynchronous notification. Channels Supported Google Assistant Attributes name - Mark name. Example Go from <mark name=\"here\"/> here, to <mark name=\"there\"/> there! <media> Represents a media layer within a <parallel> or <sequential> element. The allowed content of a <media> element is an SSML <speak> or <audio> element. The following table describes the valid attributes for a <media> element. Channels Supported Google Assistant Attributes xml:id - A unique XML identifier for this element. Encoded entities are not supported. The allowed identifier values match the regular expression \"([-_#]|\\p{L}|\\p{D})+\". See XML-ID for more information. begin - The beginning time for this media container. Ignored if this is the root media container element (treated the same as the default of \"0\"). See the Time specification section below for valid string values. end - A specification for the ending time for this media container. See the Time specification section below for valid string values. repeatCount - A Real Number specifying how many times to insert the media. Fractional repetitions aren't supported, so the value will be rounded to the nearest integer. Zero is not a valid value and is therefore treated as being unspecified and has the default value in that case. repeatDur - A TimeDesignation that is a limit on the duration of the inserted media. If the duration of the media is less than this value, then playback ends at that time. soundLevel - Adjust the sound level of the audio by soundLevel decibels. Maximum range is +/-40dB but actual range may be effectively less, and output quality may not yield good results over the entire range. fadeInDur - A TimeDesignation over which the media will fade in from silent to the optionally-specified soundLevel. If the duration of the media is less than this value, the media will be mid-fade in at the end of playback. fadeOutDur - A TimeDesignation over which the media will fade out from the optionally-specified soundLevel until it is silent. If the duration of the media is less than this value, the media will be mid-fade out at the beginning of playback. Example <media xml:id=\"question\" begin=\"0.5s\"> <speak>Who invented the Internet?</speak> </media> <parallel> A parallel media container that allows you to play multiple media elements at once. The only allowed content is a set of one or more <parallel>, <sequential>, and <media> elements. The order of the <media> elements is not significant. Channels Supported Google Assistant Example <parallel> <media xml:id=\"question\" begin=\"0.5s\"> <speak>Who invented the Internet?</speak> </media> <media xml:id=\"answer\" begin=\"question.end+2.0s\"> <speak>The Internet was invented by cats.</speak> </media> </parallel> <sequential> A sequential media container that allows you to play media elements one after another. The only allowed content is a set of one or more <sequential>, <parallel>, and <media> elements. The order of the media elements is the order in which they are rendered. Channels Supported Google Assistant Example <sequential> <media begin=\"0.5s\"> <speak>Who invented the Internet?</speak> </media> <media begin=\"2.0s\"> <speak>The Internet was invented by cats.</speak> </media> </sequential>","title":"CCML"},{"location":"CCML/#ccml-coco-speech-synthesis-markup-language","text":"A cross platform speech synthesis markup language.","title":"CCML =&gt; CoCo Speech Synthesis Markup Language"},{"location":"CCML/#break","text":"Set pause at the conversation.","title":"&lt;break&gt;"},{"location":"CCML/#channels-supported","text":"Phone Amazon Alexa Google Assistant ZOOM","title":"Channels Supported"},{"location":"CCML/#attributes","text":"strength - none: Remove a pause. x-weak: Remove a pause same as none. weak: Treat adjacent words as if separated by a single comma (equivalent to medium). medium: Treat adjacent words as if separated by a single comma. strong: Make a sentence break. x-strong: Make a paragraph break. time - Sets the length of the break by seconds or milliseconds (e.g. \"3s\" or \"250ms\").","title":"Attributes"},{"location":"CCML/#example","text":"Lakritz is tasty <break time=\"3s\"/> Nooot!","title":"Example"},{"location":"CCML/#say-as","text":"The tag lets you indicate information about the type of text construct that is contained within the tag.","title":"&lt;say-as&gt;"},{"location":"CCML/#channels-supported_1","text":"Phone Amazon Alexa Google Assistant ZOOM","title":"Channels Supported"},{"location":"CCML/#attributes_1","text":"interpret-as - characters, spell-out: Spell out each letter. cardinal, number: Interpret the value as a cardinal number. ordinal: Interpret the value as an ordinal number. fraction: Interpret the value as a fraction. This works for both common fractions (such as 3/20) and mixed fractions (such as 1+1/2). unit: Interpret a value as a measurement. The value should be either a number or fraction followed by a unit (with no space in between) or just a unit. date: Interpret the value as a date. Specify the format with the format attribute. time: Interpret a value such as 1'21\" as duration in minutes and seconds. telephone: Interpret a value as a 7-digit or 10-digit telephone number. This can also handle extensions (for example, 2025551212x345). expletive: \"Bleep\" out the content inside the tag.","title":"Attributes"},{"location":"CCML/#example_1","text":"<say-as interpret-as=\"cardinal\">12345</say-as>","title":"Example"},{"location":"CCML/#p","text":"Represents a paragraph in speech.","title":"&lt;p&gt;"},{"location":"CCML/#channels-supported_2","text":"Phone Amazon Alexa Google Assistant ZOOM","title":"Channels Supported"},{"location":"CCML/#example_2","text":"<p>This is the first paragraph.</p> <p>This is the second paragraph.</p>","title":"Example"},{"location":"CCML/#s","text":"Represents a sentence in speech.","title":"&lt;s&gt;"},{"location":"CCML/#channels-supported_3","text":"Phone Amazon Alexa Google Assistant ZOOM","title":"Channels Supported"},{"location":"CCML/#example_3","text":"<s>This is the first sentence.</s> <s>This is the second sentence.</s>","title":"Example"},{"location":"CCML/#prosody","text":"Used to customize the pitch, speaking rate, and volume of text contained by the element.","title":"&lt;prosody&gt;"},{"location":"CCML/#channels-supported_4","text":"Phone Amazon Alexa Google Assistant ZOOM","title":"Channels Supported"},{"location":"CCML/#attributes_2","text":"rate - Modify the rate of the speech - slow medium fast pitch - Raise or lower the tone (pitch) of the speech - slow medium fast volume - Change the volume for the speech - silent x-soft soft medium loud x-loud","title":"Attributes"},{"location":"CCML/#example_4","text":"<prosody volume=\"x-loud\">Louder volume for this sentence.</prosody>. <prosody rate=\"slow\">I speak quite slowly</prosody>.","title":"Example"},{"location":"CCML/#emphasis","text":"Emphasis changes rate and volume of the speech. More emphasis is spoken louder and slower. Less emphasis is quieter and faster.","title":"&lt;emphasis&gt;"},{"location":"CCML/#channels-supported_5","text":"Phone Amazon Alexa Google Assistant ZOOM","title":"Channels Supported"},{"location":"CCML/#attributes_3","text":"level - strong: Increase the volume and slow down the speaking rate so the speech is louder and slower. moderate: Increase the volume and slow down the speaking rate, but not as much as when set to strong. This is used as a default if level is not provided. reduced: Decrease the volume and speed up the speaking rate. The speech is softer and faster.","title":"Attributes"},{"location":"CCML/#example_5","text":"Hey you, <emphasis level=\"strong\">come here!</emphasis>","title":"Example"},{"location":"CCML/#sub","text":"Indicate that the text in the alias attribute value replaces the contained text for pronunciation.","title":"&lt;sub&gt;"},{"location":"CCML/#channels-supported_6","text":"Phone Amazon Alexa Google Assistant ZOOM","title":"Channels Supported"},{"location":"CCML/#attributes_4","text":"alias - The word or phrase to speak in place of the tagged text.","title":"Attributes"},{"location":"CCML/#example_6","text":"<sub alias=\"Speech Synthesis Markup Language\">ssml</sub>","title":"Example"},{"location":"CCML/#phoneme","text":"Provides a phonemic/phonetic pronunciation for the contained text. People may pronounce some words differently.","title":"&lt;phoneme&gt;"},{"location":"CCML/#channels-supported_7","text":"Phone Amazon Alexa ZOOM","title":"Channels Supported"},{"location":"CCML/#attributes-and-examples","text":"Amazon Alexa phoneme tag description","title":"Attributes and Examples"},{"location":"CCML/#voice","text":"Use the voice tag to speak the text with the specified Amazon Polly voice.","title":"&lt;voice&gt;"},{"location":"CCML/#channels-supported_8","text":"Phone Amazon Alexa ZOOM","title":"Channels Supported"},{"location":"CCML/#attributes_5","text":"name - Polly voice ID ( List of voice IDs )","title":"Attributes"},{"location":"CCML/#example_7","text":"<voice name=\"Amy\">My name is Amy, darling.</voice>.","title":"Example"},{"location":"CCML/#language","text":"Use language to specify the language model and rules to speak the tagged content as if it were written in the language specified by the xml:lang attribute.","title":"&lt;language&gt;"},{"location":"CCML/#channels-supported_9","text":"Phone Amazon Alexa ZOOM","title":"Channels Supported"},{"location":"CCML/#attributes_6","text":"xml:lang - de-DE en-AU en-CA en-GB en-IN en-US es-ES es-MX es-US fr-CA fr-FR hi-IN it-IT ja-JP pt-BR","title":"Attributes"},{"location":"CCML/#example_8","text":"<language xml:lang=\"fr-FR\">J'adore chanter</language>","title":"Example"},{"location":"CCML/#part-of-speech","text":"Similar to say-as, this tag customizes the pronunciation of words by specifying the word's part of speech.","title":"&lt;part-of-speech&gt;"},{"location":"CCML/#channels-supported_10","text":"Phone Amazon Alexa ZOOM","title":"Channels Supported"},{"location":"CCML/#attributes_7","text":"role - amazon:VB: Interpret the word as a verb (present simple). amazon:VBD: Interpret the word as a past participle. amazon:NN: Interpret the word as a noun.","title":"Attributes"},{"location":"CCML/#example_9","text":"I really like to <part-of-speech role=\"amazon:VB\">eat</part-of-speech> pizza.","title":"Example"},{"location":"CCML/#domain","text":"Applies different speaking styles to the speech. The styles are curated text-to-speech voices that use different variations of intonation, emphasis, pausing, and other techniques to match the speech to the content.","title":"&lt;domain&gt;"},{"location":"CCML/#channels-supported_11","text":"Amazon Alexa ZOOM","title":"Channels Supported"},{"location":"CCML/#attributes_8","text":"name - conversational \u2013 Style voices to sound more conversational and less formal, more like how people sound when they speak to friends and family. The conversational style is available in English (US), Italian (IT), and Japanese (JP) skills. You can also use this style with Amazon Polly voices. For Amazon Polly, conversational requires the <voice> tag and the Matthew or Joanna voices. long-form \u2013 Style the speech for long-form content such as podcasts, articles, and blogs. The long-form style can't be used with the voice tag. The long-form style is available in English (US) skills. music \u2013 Style the speech for talking about music, video, or other multi-media content. The music style can't be used with the voice tag. The music style is available in English (US), English (CA), and English (UK) skills. news \u2013 Style the speech similar to what you hear when listening to the news on the radio or television. The news style can be combined with the voice tag and the Matthew, Joanna, and Lupe voices. The news style is available in English (US) and English (AU) skills.","title":"Attributes"},{"location":"CCML/#example_10","text":"<domain name=\"news\"> Here are the latest new about conversational AI and voice. </domain>","title":"Example"},{"location":"CCML/#effect","text":"Applies specific effects to the speech.","title":"&lt;effect&gt;"},{"location":"CCML/#channels-supported_12","text":"Amazon Alexa ZOOM","title":"Channels Supported"},{"location":"CCML/#attributes_9","text":"name - whispered - Applies a whispering effect to the speech.","title":"Attributes"},{"location":"CCML/#example_11","text":"<effect name=\"whispered\">I am whispering this.</effect>","title":"Example"},{"location":"CCML/#emotion","text":"The emotion tag causes Alexa to express emotion when speaking.","title":"&lt;emotion&gt;"},{"location":"CCML/#channels-supported_13","text":"Amazon Alexa ZOOM","title":"Channels Supported"},{"location":"CCML/#attributes_10","text":"name - The name of the emotion to apply to the speech. - excited disappointed intensity - The intensity or strength of the emotion to express. - low medium high","title":"Attributes"},{"location":"CCML/#example_12","text":"<emotion name=\"excited\" intensity=\"high\"> This is unbelievable! </emotion>","title":"Example"},{"location":"CCML/#speak","text":"This is the root element of an SSML document.","title":"&lt;speak&gt;"},{"location":"CCML/#channels-supported_14","text":"Amazon Alexa Google Assistant ZOOM","title":"Channels Supported"},{"location":"CCML/#example_13","text":"<speak> SSML content </speak>","title":"Example"},{"location":"CCML/#audio","text":"The audio tag lets you provide the URL for an MP3 file that the service can play while rendering a response.","title":"&lt;audio&gt;"},{"location":"CCML/#channels-supported_15","text":"Amazon Alexa Google Assistant ZOOM","title":"Channels Supported"},{"location":"CCML/#attributes_11","text":"src - A URI referring to the audio media source. Supported protocol is https.","title":"Attributes"},{"location":"CCML/#example_14","text":"<audio src=\"https://some-url.com/soundfile.mp3\" />","title":"Example"},{"location":"CCML/#mark","text":"An empty element that places a marker into the text or tag sequence. It can be used to reference a specific location in the sequence or to insert a marker into an output stream for asynchronous notification.","title":"&lt;mark&gt;"},{"location":"CCML/#channels-supported_16","text":"Google Assistant","title":"Channels Supported"},{"location":"CCML/#attributes_12","text":"name - Mark name.","title":"Attributes"},{"location":"CCML/#example_15","text":"Go from <mark name=\"here\"/> here, to <mark name=\"there\"/> there!","title":"Example"},{"location":"CCML/#media","text":"Represents a media layer within a <parallel> or <sequential> element. The allowed content of a <media> element is an SSML <speak> or <audio> element. The following table describes the valid attributes for a <media> element.","title":"&lt;media&gt;"},{"location":"CCML/#channels-supported_17","text":"Google Assistant","title":"Channels Supported"},{"location":"CCML/#attributes_13","text":"xml:id - A unique XML identifier for this element. Encoded entities are not supported. The allowed identifier values match the regular expression \"([-_#]|\\p{L}|\\p{D})+\". See XML-ID for more information. begin - The beginning time for this media container. Ignored if this is the root media container element (treated the same as the default of \"0\"). See the Time specification section below for valid string values. end - A specification for the ending time for this media container. See the Time specification section below for valid string values. repeatCount - A Real Number specifying how many times to insert the media. Fractional repetitions aren't supported, so the value will be rounded to the nearest integer. Zero is not a valid value and is therefore treated as being unspecified and has the default value in that case. repeatDur - A TimeDesignation that is a limit on the duration of the inserted media. If the duration of the media is less than this value, then playback ends at that time. soundLevel - Adjust the sound level of the audio by soundLevel decibels. Maximum range is +/-40dB but actual range may be effectively less, and output quality may not yield good results over the entire range. fadeInDur - A TimeDesignation over which the media will fade in from silent to the optionally-specified soundLevel. If the duration of the media is less than this value, the media will be mid-fade in at the end of playback. fadeOutDur - A TimeDesignation over which the media will fade out from the optionally-specified soundLevel until it is silent. If the duration of the media is less than this value, the media will be mid-fade out at the beginning of playback.","title":"Attributes"},{"location":"CCML/#example_16","text":"<media xml:id=\"question\" begin=\"0.5s\"> <speak>Who invented the Internet?</speak> </media>","title":"Example"},{"location":"CCML/#parallel","text":"A parallel media container that allows you to play multiple media elements at once. The only allowed content is a set of one or more <parallel>, <sequential>, and <media> elements. The order of the <media> elements is not significant.","title":"&lt;parallel&gt;"},{"location":"CCML/#channels-supported_18","text":"Google Assistant","title":"Channels Supported"},{"location":"CCML/#example_17","text":"<parallel> <media xml:id=\"question\" begin=\"0.5s\"> <speak>Who invented the Internet?</speak> </media> <media xml:id=\"answer\" begin=\"question.end+2.0s\"> <speak>The Internet was invented by cats.</speak> </media> </parallel>","title":"Example"},{"location":"CCML/#sequential","text":"A sequential media container that allows you to play media elements one after another. The only allowed content is a set of one or more <sequential>, <parallel>, and <media> elements. The order of the media elements is the order in which they are rendered.","title":"&lt;sequential&gt;"},{"location":"CCML/#channels-supported_19","text":"Google Assistant","title":"Channels Supported"},{"location":"CCML/#example_18","text":"<sequential> <media begin=\"0.5s\"> <speak>Who invented the Internet?</speak> </media> <media begin=\"2.0s\"> <speak>The Internet was invented by cats.</speak> </media> </sequential>","title":"Example"},{"location":"SDKs/","text":"Python ( github ) NodeJS ( github ) Rasa ( github ) Cognigy ( github )","title":"SDKs"},{"location":"SDKs/#python","text":"( github )","title":"Python"},{"location":"SDKs/#nodejs","text":"( github )","title":"NodeJS"},{"location":"SDKs/#rasa","text":"( github )","title":"Rasa"},{"location":"SDKs/#cognigy","text":"( github )","title":"Cognigy"},{"location":"api/","text":"window.onload = function () { // Begin Swagger UI call region const ui = SwaggerUIBundle({ url: \"/openapi.yaml\", //Location of Open API spec in the repo dom_id: '#swagger-ui', deepLinking: true, presets: [ SwaggerUIBundle.presets.apis, SwaggerUIBundle.SwaggerUIStandalonePreset ], plugins: [ SwaggerUIBundle.plugins.DownloadUrl ], }) window.ui = ui }","title":"Api"},{"location":"connectors/","text":"Toolkits to expose components with our unified API Dialogflow ( github ) Rasa ( github ) Cognigy ( github ) Houndify ( github )","title":"Connectors"},{"location":"connectors/#dialogflow","text":"( github )","title":"Dialogflow"},{"location":"connectors/#rasa","text":"( github )","title":"Rasa"},{"location":"connectors/#cognigy","text":"( github )","title":"Cognigy"},{"location":"connectors/#houndify","text":"( github )","title":"Houndify"},{"location":"vendor-guidelines/","text":"The component should address a single task or conversation topic The component must comply with the CoCo API, terms and conditions The component must be able to manage the calls to and from the component (control protocol) The component must use the context/updated_context/context transfer standard correctly The vendor should provide a clear description and goal of the component The component must be be available for calls 24/7. Minimum uptime of over 95%. The Component must be self-contained - handle the conversation from beginning to end Parameters passed by the component must be relevant to the component\u2019s goal The Component should be able to understand inputs which are relevant to the component goal (within reason), and identify inputs not relevant to the component goal The vendor must expose all bot responses for lingual customization The component must be GDPR compliant.","title":"Publishing guidelines"},{"location":"concepts/","text":"Concepts Component A conversation\u2019s building block. A mini chatbot that fulfils a defined purpose in a conversation. For example, a name component will collect the users\u2019 first and last name. Happy Path A conversation between a user and bot, in which the user cooperates perfectly with the conversation. It\u2019s used when designing a conversation, not as a rating tool for the conversation after it ended. Say node An \u201cempty\u201d node, where you can write anything you\u2019d like your bot to say, in case you\u2019d like to write something from scratch, and not use existing components. If you ask a question inside the node, you should connect it to a navigation node. Navigation node A node that will direct your user to the appropriate next part in the conversation, according to the intents you\u2019ll choose to place inside it. The last intent inside this node will always be \u201cAnything else\u201d. This intent will get the user to the next node - even if what they say doesn't fit into the options you've listed above it. For example, you\u2019ve created a say node and connected it to a navigation node. Now, add a \u201cyes\u201d intent, \u201cno\u201d intent, \u201ccontinue\u201d and \u201cstop\u201d. Each one of them will lead the user to a different part in the conversation, according to the next nodes you connect. Scene When publishing your bot on Zoom, you\u2019ll need to choose an avatar and scene. Or one will be chosen for you. Evil laugh . Actually, no. You\u2019ll need to choose your own. The scene is the background that will appear behind your chosen avatar during the zoom calls he/she will be having with your clients, users or anyone you\u2019ll send the link to. Avatar For your bot to appear on Zoom and interact with your users, it needs to look some kind of way, right? So after choosing a name and email address, you\u2019ll choose an avatar. This will be the virtual avatar (and visual representation of you bot). Transitions The transitions are the connecting lines you draw from each nodes\u2019 port to another port in a different node. It\u2019s Super important to connect at least one transition to each port, unless you want the conversation to end at that node. Node Any part of the conversation added to your bot, represented visually by boxes on the builder. Logs The transcriptions of any conversation users has with your bots. Since we respect the users\u2019 privacy, all the users will be represented by the word \u201cUser\u201d and not their name/nickname. You will be able to see the whole conversation, and its\u2019 time and date.","title":"General"},{"location":"concepts/#concepts","text":"","title":"Concepts"},{"location":"concepts/#component","text":"A conversation\u2019s building block. A mini chatbot that fulfils a defined purpose in a conversation. For example, a name component will collect the users\u2019 first and last name.","title":"Component"},{"location":"concepts/#happy-path","text":"A conversation between a user and bot, in which the user cooperates perfectly with the conversation. It\u2019s used when designing a conversation, not as a rating tool for the conversation after it ended.","title":"Happy Path"},{"location":"concepts/#say-node","text":"An \u201cempty\u201d node, where you can write anything you\u2019d like your bot to say, in case you\u2019d like to write something from scratch, and not use existing components. If you ask a question inside the node, you should connect it to a navigation node.","title":"Say node"},{"location":"concepts/#navigation-node","text":"A node that will direct your user to the appropriate next part in the conversation, according to the intents you\u2019ll choose to place inside it. The last intent inside this node will always be \u201cAnything else\u201d. This intent will get the user to the next node - even if what they say doesn't fit into the options you've listed above it. For example, you\u2019ve created a say node and connected it to a navigation node. Now, add a \u201cyes\u201d intent, \u201cno\u201d intent, \u201ccontinue\u201d and \u201cstop\u201d. Each one of them will lead the user to a different part in the conversation, according to the next nodes you connect.","title":"Navigation node"},{"location":"concepts/#scene","text":"When publishing your bot on Zoom, you\u2019ll need to choose an avatar and scene. Or one will be chosen for you. Evil laugh . Actually, no. You\u2019ll need to choose your own. The scene is the background that will appear behind your chosen avatar during the zoom calls he/she will be having with your clients, users or anyone you\u2019ll send the link to.","title":"Scene"},{"location":"concepts/#avatar","text":"For your bot to appear on Zoom and interact with your users, it needs to look some kind of way, right? So after choosing a name and email address, you\u2019ll choose an avatar. This will be the virtual avatar (and visual representation of you bot).","title":"Avatar"},{"location":"concepts/#transitions","text":"The transitions are the connecting lines you draw from each nodes\u2019 port to another port in a different node. It\u2019s Super important to connect at least one transition to each port, unless you want the conversation to end at that node.","title":"Transitions"},{"location":"concepts/#node","text":"Any part of the conversation added to your bot, represented visually by boxes on the builder.","title":"Node"},{"location":"concepts/#logs","text":"The transcriptions of any conversation users has with your bots. Since we respect the users\u2019 privacy, all the users will be represented by the word \u201cUser\u201d and not their name/nickname. You will be able to see the whole conversation, and its\u2019 time and date.","title":"Logs"},{"location":"concepts/context/","text":"General Context refers to the the short-term memory maintained during the current session. The memory is in the form of key-value pairs with nested structes. It usually contains information about the user or information relating to the goal of the component. A calling agent can pass context key-values to a component on every turn and the response includes updated context key-values. At the end of a session with a component the final context holds the last version of each datapoint gathered in the conversation and can be used as structured data for other components.","title":"Context"},{"location":"concepts/context/#general","text":"Context refers to the the short-term memory maintained during the current session. The memory is in the form of key-value pairs with nested structes. It usually contains information about the user or information relating to the goal of the component. A calling agent can pass context key-values to a component on every turn and the response includes updated context key-values. At the end of a session with a component the final context holds the last version of each datapoint gathered in the conversation and can be used as structured data for other components.","title":"General"},{"location":"concepts/convcomp/","text":"General A conversational component is a part of the conversation where an agent (virtual/real) takes over the conversation in order to accomplish one or more goals. Upon accomplishing the goal, the agent (virtual/real) relinquishes control of the conversation back to the calling agent. Each component is defined by the goal or goals it is attempting to solve. Conversational components are architected to be modular Entries A component may be called at any point in the conversation so it needs to be ready to assume control of an existing conversation or, alternately, initiate a conversation. Every component needs to decide how to handle the conversation history it inherits - if any. Terminating a component Each component can signal the calling agent to stop calling it at any point. Usually it will send the signal along with information about the component's stated goal: 1. component_done: The Component accomplished the stated goal 2. component_failed: The Component didn't accomplish the stated goal Going out of context Sometimes when a user is talking to a component, he/she will ask questions which are outside the domain of the component (Out of Context) There are several options for this scenarion: one way to handle it is to relinquish control back to the calling agent for one turn (to answer the non-contextual question) and then resume control immediately after providing the relevant response. In CoCo this signal is called \"out_of_context\" CoCo API Specs","title":"Conversational Component"},{"location":"concepts/convcomp/#general","text":"A conversational component is a part of the conversation where an agent (virtual/real) takes over the conversation in order to accomplish one or more goals. Upon accomplishing the goal, the agent (virtual/real) relinquishes control of the conversation back to the calling agent. Each component is defined by the goal or goals it is attempting to solve. Conversational components are architected to be modular","title":"General"},{"location":"concepts/convcomp/#entries","text":"A component may be called at any point in the conversation so it needs to be ready to assume control of an existing conversation or, alternately, initiate a conversation. Every component needs to decide how to handle the conversation history it inherits - if any.","title":"Entries"},{"location":"concepts/convcomp/#terminating-a-component","text":"Each component can signal the calling agent to stop calling it at any point. Usually it will send the signal along with information about the component's stated goal: 1. component_done: The Component accomplished the stated goal 2. component_failed: The Component didn't accomplish the stated goal","title":"Terminating a component"},{"location":"concepts/convcomp/#going-out-of-context","text":"Sometimes when a user is talking to a component, he/she will ask questions which are outside the domain of the component (Out of Context) There are several options for this scenarion: one way to handle it is to relinquish control back to the calling agent for one turn (to answer the non-contextual question) and then resume control immediately after providing the relevant response. In CoCo this signal is called \"out_of_context\"","title":"Going out of context"},{"location":"concepts/convcomp/#coco-api-specs","text":"","title":"CoCo API Specs"},{"location":"concepts/goals/","text":"General Conversation is an interactive communication between two or more agents (virtual or real). Each agent has their own agenda and goals. The typical framing of a reinforcement learning scenario from each agent's point of view is such: His environment is the other agent's which he observes and interprets to build his model of the world He maintains state - his memory is based on previous observations and his model of the world He performs actions based on his state in the environment in order to achieve his goals Note In a learned agent each action is paired with a reward. The agent agenda and goals are defined by these rewards.","title":"Goals"},{"location":"concepts/goals/#general","text":"Conversation is an interactive communication between two or more agents (virtual or real). Each agent has their own agenda and goals. The typical framing of a reinforcement learning scenario from each agent's point of view is such: His environment is the other agent's which he observes and interprets to build his model of the world He maintains state - his memory is based on previous observations and his model of the world He performs actions based on his state in the environment in order to achieve his goals Note In a learned agent each action is paired with a reward. The agent agenda and goals are defined by these rewards.","title":"General"},{"location":"future/new/","text":"What is \u201cunhappy path\u201d and how we survive it Some conversations are great success stories. The user fulfills your original purpose, you reached your goal, and you\u2019re feeling like a superstar. Some conversations, on the other side, are not. There are users that were rude, uncooperative or just woke up on the wrong side of the bed, or, in other cases, you just didn\u2019t plan correctly a legit option for the conversational flow. Whatever the reason is - the chatbot didn't reach its goal. It happens. We\u2019re all humans. We\u2019re not chatbots. Yet. That, my friends, is called \u201cThe unhappy path\u201d. How do we rise up and save the day? 1. TESTING IN ADVANCE To view the unhappy path, we should do a lot of testing. Publish your chatbot in advance on a testing site or device, send to people you know - your teammates, your client\u2019s workers - and ask them to try and tackle your chatbot. Curse it. Crush it. Try to fail it. Put all your frustrations there, people. No mercy. Let it all out. Then, collect the answers and categorize them into 2 groups - How didn\u2019t I think about it? What were you thinking? Category A means that people expect your chatbot to do things that you didn\u2019t plan yet. Maybe they expect the chatbot to function as well as the actual salesperson or call center rep. It means that they have high expectations. That\u2019s good. Let\u2019s fulfill them. Decide what your chatbot can support. For example, if you run a second-hand clothing store and testers are unexpectedly asking about returns - does your store support this? If your store does, and you only planned a chatbot selling the clothes, add a flow for returns. Ditto for every other task they ask the chatbot for, and that you can deliver on. Hours of availability? Driving directions? Special sales? Why did you give your store this name? Did you cover all of those? If not, it\u2019s not too late. Instructions from here onward: Stay calm and keep designing the other flows. Repeat until perfection is achieved. Or at least, competency. Nobody\u2019s perfect. NEXT! Category B is basically questions that are unrelated to whatever your store does. Let\u2019s stick to the second-hand clothes example. \u201cHey chatbot, can you get me a recipe for chilli?\u201d. \u201cCan I go out with you?\u201d. \u201cWhat can you recommend for a hangover?\u201d. This is completely unrelated and, some will say, inappropriate enquiries. Should you ignore them? Would you ignore them if you were a person? Probably NOT. You would answer. Savagely, sassily, kindly, but you would answer. The chatbot can answer too. Which leads us to the three ways of answering unrelated questions. 2. FAQ Component If there are general questions that are unrelated to your purpose, but are being repeated - well, that means that they\u2019re \u201cFrequently Asked Questions\u201d, which is the point of FAQ. Those questions aren\u2019t necessarily rude or bad. They can be as innocent as \u201cWhat\u2019s your name\u201d or \u201cHow do you feel\u201d. For that, use our FAQ component. Remember - since your chatbot needs a consistent personality, you can\u2019t answer one question like you\u2019re the most polite person on Earth, and to other ones like you\u2019re a millennial revolutionist. Whatever you decide is your business. Literally. Just be consistent. This is how you rock it: Click on an FAQ component in the hub Click \u201cUse\u201d and give it your own name Go to \u201cMy Components\u201d and track it down Fill in the relevant questions Attach one answer or more to every question In every Navigation block, connect the \u201cwildcard\u201d option to your FAQ component. This way, whenever the user asks one of the aforementioned questions - the user will get the answer you wrote. Boom! 3. One-liner If there are words - not questions - that are unrelated to your chatbot\u2019s purpose, but are being repeated, you can handle them in another way. This is the \u201cOne-liner\u201d. It gives a one-line answer to specific words or phrases. Remember that second-hand store? Let\u2019s say that the users keep typing, for whatever reason, \u201cPlum\u201d. What would you do in a conversation with humans? Now think about your chatbot\u2019s persona and what it should answer. This is how you rock it: Choose a \u201cNavigation\u201d node Open a \u201ckeyword\u201d intent Write the relevant keyword or keywords that will lead to a specific answer Connect it to a \u201cSay\u201d node Write the answer you want Leave the \u201csay\u201d unconnected to anything, so it basically goes back to the previous component Save it as a \u201cone liner\u201d with a name that you\u2019ll remember In every Navigation block, connect the \u201cwildcard\u201d option to your one-liner. This way, whenever the user types one of the aforementioned words - the user will get the answer you wrote. Splash! 4. General Fallback This is the simplest option. Some will say it\u2019s mundane or boring, but sometimes it does the work. In this case, you just give all the irrelevant questions, phrases or words the same response(s). The general intention of this general fallback is to try to fall back from the conversation that the user was trying to have - to the one that you, the designer, planned on having. And if the user tries again to fail the chatbot? You\u2019re not breaking a sweat. Just take the user back to your original flow again. A fallback also covers all the other possibilities that weren\u2019t covered in FAQs or One-Liners - remember that there\u2019s no such thing as covering 100% of the options in a conversation. People will always come up with something. People can be cruel. This is how you rock it: In the navigation node, after you filled all the happy path intents, choose a line with \u201cwildcard\u201d Send it to a \u201cSay\u201d In the newly created \u201cSay\u201d, type in your general fallback (For instance - \u201cLet\u2019s leave that for another time, please\u201d) Connect this \u201cSay\u201d back to the original navigation, so you require the user to pick one of your happy paths, in order to continue the conversation. Again, consider your chatbot\u2019s persona when writing the fallback. For instance - if you\u2019re running the second-hand store, it can be something like \u201cYou\u2019re wearing me out... Let\u2019s try again\u201d. And when you finish? That\u2019s it. Your chatbot is ready for whatever life will throw at you. Well, maybe not for literally every thing, but at least for most.","title":"What is \u201cunhappy path\u201d and how we survive it"},{"location":"future/new/#what-is-unhappy-path-and-how-we-survive-it","text":"Some conversations are great success stories. The user fulfills your original purpose, you reached your goal, and you\u2019re feeling like a superstar. Some conversations, on the other side, are not. There are users that were rude, uncooperative or just woke up on the wrong side of the bed, or, in other cases, you just didn\u2019t plan correctly a legit option for the conversational flow. Whatever the reason is - the chatbot didn't reach its goal. It happens. We\u2019re all humans. We\u2019re not chatbots. Yet. That, my friends, is called \u201cThe unhappy path\u201d. How do we rise up and save the day?","title":"What is \u201cunhappy path\u201d and how we survive it"},{"location":"future/new/#1-testing-in-advance","text":"To view the unhappy path, we should do a lot of testing. Publish your chatbot in advance on a testing site or device, send to people you know - your teammates, your client\u2019s workers - and ask them to try and tackle your chatbot. Curse it. Crush it. Try to fail it. Put all your frustrations there, people. No mercy. Let it all out. Then, collect the answers and categorize them into 2 groups - How didn\u2019t I think about it? What were you thinking? Category A means that people expect your chatbot to do things that you didn\u2019t plan yet. Maybe they expect the chatbot to function as well as the actual salesperson or call center rep. It means that they have high expectations. That\u2019s good. Let\u2019s fulfill them. Decide what your chatbot can support. For example, if you run a second-hand clothing store and testers are unexpectedly asking about returns - does your store support this? If your store does, and you only planned a chatbot selling the clothes, add a flow for returns. Ditto for every other task they ask the chatbot for, and that you can deliver on. Hours of availability? Driving directions? Special sales? Why did you give your store this name? Did you cover all of those? If not, it\u2019s not too late. Instructions from here onward: Stay calm and keep designing the other flows. Repeat until perfection is achieved. Or at least, competency. Nobody\u2019s perfect. NEXT! Category B is basically questions that are unrelated to whatever your store does. Let\u2019s stick to the second-hand clothes example. \u201cHey chatbot, can you get me a recipe for chilli?\u201d. \u201cCan I go out with you?\u201d. \u201cWhat can you recommend for a hangover?\u201d. This is completely unrelated and, some will say, inappropriate enquiries. Should you ignore them? Would you ignore them if you were a person? Probably NOT. You would answer. Savagely, sassily, kindly, but you would answer. The chatbot can answer too. Which leads us to the three ways of answering unrelated questions.","title":"1. TESTING IN ADVANCE"},{"location":"future/new/#2-faq-component","text":"If there are general questions that are unrelated to your purpose, but are being repeated - well, that means that they\u2019re \u201cFrequently Asked Questions\u201d, which is the point of FAQ. Those questions aren\u2019t necessarily rude or bad. They can be as innocent as \u201cWhat\u2019s your name\u201d or \u201cHow do you feel\u201d. For that, use our FAQ component. Remember - since your chatbot needs a consistent personality, you can\u2019t answer one question like you\u2019re the most polite person on Earth, and to other ones like you\u2019re a millennial revolutionist. Whatever you decide is your business. Literally. Just be consistent.","title":"2. FAQ Component"},{"location":"future/new/#this-is-how-you-rock-it","text":"Click on an FAQ component in the hub Click \u201cUse\u201d and give it your own name Go to \u201cMy Components\u201d and track it down Fill in the relevant questions Attach one answer or more to every question In every Navigation block, connect the \u201cwildcard\u201d option to your FAQ component. This way, whenever the user asks one of the aforementioned questions - the user will get the answer you wrote. Boom!","title":"This is how you rock it:"},{"location":"future/new/#3-one-liner","text":"If there are words - not questions - that are unrelated to your chatbot\u2019s purpose, but are being repeated, you can handle them in another way. This is the \u201cOne-liner\u201d. It gives a one-line answer to specific words or phrases. Remember that second-hand store? Let\u2019s say that the users keep typing, for whatever reason, \u201cPlum\u201d. What would you do in a conversation with humans? Now think about your chatbot\u2019s persona and what it should answer.","title":"3. One-liner"},{"location":"future/new/#this-is-how-you-rock-it_1","text":"Choose a \u201cNavigation\u201d node Open a \u201ckeyword\u201d intent Write the relevant keyword or keywords that will lead to a specific answer Connect it to a \u201cSay\u201d node Write the answer you want Leave the \u201csay\u201d unconnected to anything, so it basically goes back to the previous component Save it as a \u201cone liner\u201d with a name that you\u2019ll remember In every Navigation block, connect the \u201cwildcard\u201d option to your one-liner. This way, whenever the user types one of the aforementioned words - the user will get the answer you wrote. Splash!","title":"This is how you rock it:"},{"location":"future/new/#4-general-fallback","text":"This is the simplest option. Some will say it\u2019s mundane or boring, but sometimes it does the work. In this case, you just give all the irrelevant questions, phrases or words the same response(s). The general intention of this general fallback is to try to fall back from the conversation that the user was trying to have - to the one that you, the designer, planned on having. And if the user tries again to fail the chatbot? You\u2019re not breaking a sweat. Just take the user back to your original flow again. A fallback also covers all the other possibilities that weren\u2019t covered in FAQs or One-Liners - remember that there\u2019s no such thing as covering 100% of the options in a conversation. People will always come up with something. People can be cruel.","title":"4. General Fallback"},{"location":"future/new/#this-is-how-you-rock-it_2","text":"In the navigation node, after you filled all the happy path intents, choose a line with \u201cwildcard\u201d Send it to a \u201cSay\u201d In the newly created \u201cSay\u201d, type in your general fallback (For instance - \u201cLet\u2019s leave that for another time, please\u201d) Connect this \u201cSay\u201d back to the original navigation, so you require the user to pick one of your happy paths, in order to continue the conversation. Again, consider your chatbot\u2019s persona when writing the fallback. For instance - if you\u2019re running the second-hand store, it can be something like \u201cYou\u2019re wearing me out... Let\u2019s try again\u201d. And when you finish? That\u2019s it. Your chatbot is ready for whatever life will throw at you. Well, maybe not for literally every thing, but at least for most.","title":"This is how you rock it:"},{"location":"howtos/analyze-logs/","text":"How to analyze you logs When calling some call centers, they\u2019ll tell you in advance - we\u2019re recording the conversations, and review them in order to improve our services. You need to do the same with the conversations customers (or anyone) are having with your bot. See where people dropped off the conversation, where most users get stuck - and make your bot better, using the log info. Click on \u201cLogs\u201d on the side nav Choose the bot you want to analyze, either by scrolling down the options on the left side, or by typing the bot\u2019s name in the \u201cFiler components\u201d search bar Click on any session to read and analyze the conversation We value your and your users\u2019 privacy. The log will state \u201cUser\u201d without any name or information about the user, and your logs are only available to you, the bot creator/owner Pro tip: We highly recommend using the info to make your bot better. How? Remove obstacles in the conversation that make the users drop off, rephrase questions you notice your users answers differently than expected and add relevant topics (like pandemic opening hours).","title":"Analyze Logs"},{"location":"howtos/analyze-logs/#how-to-analyze-you-logs","text":"When calling some call centers, they\u2019ll tell you in advance - we\u2019re recording the conversations, and review them in order to improve our services. You need to do the same with the conversations customers (or anyone) are having with your bot. See where people dropped off the conversation, where most users get stuck - and make your bot better, using the log info. Click on \u201cLogs\u201d on the side nav Choose the bot you want to analyze, either by scrolling down the options on the left side, or by typing the bot\u2019s name in the \u201cFiler components\u201d search bar Click on any session to read and analyze the conversation We value your and your users\u2019 privacy. The log will state \u201cUser\u201d without any name or information about the user, and your logs are only available to you, the bot creator/owner Pro tip: We highly recommend using the info to make your bot better. How? Remove obstacles in the conversation that make the users drop off, rephrase questions you notice your users answers differently than expected and add relevant topics (like pandemic opening hours).","title":"How to analyze you logs"},{"location":"howtos/audiofiles/","text":"How to add audio files to your chatbot Everything in life sounds better with sounds - so why should chatbots be the exception to the rule? So, that's why we've created the \u201cAudio Files\u201d node. When you left-click on the canvas, you\u2019ll have the option to add an \u201cAudiofile\u201d node. Click on it to open your library for mp3 files, or drag one into it Click on the \u201cspeaking\u201d icon to see it\u2019s working","title":"Play audio files"},{"location":"howtos/audiofiles/#how-to-add-audio-files-to-your-chatbot","text":"Everything in life sounds better with sounds - so why should chatbots be the exception to the rule? So, that's why we've created the \u201cAudio Files\u201d node. When you left-click on the canvas, you\u2019ll have the option to add an \u201cAudiofile\u201d node. Click on it to open your library for mp3 files, or drag one into it Click on the \u201cspeaking\u201d icon to see it\u2019s working","title":"How to add audio files to your chatbot"},{"location":"howtos/customize-comp/","text":"How to Customize a component There are 2 ways to customize an exciting component. You can do it directly from the builder, or by choosing the component and customizing it from the hub. Customize from the hub Click on the hub icon on the side nav and choose the component you want to customize. Here you can read the purpose of each component, and test it before you choose to use it. Choose the component you\u2019d like to customize. Click on Use and the bottom section of the window. Now choose an ID - name your component. \\ Super important: You won\u2019t be able to change the components name , so name it something you\u2019ll recognize and understand. Now, you\u2019ll find yourself in the y components\u201d section. Click on the 3 dots on the right side of your component. Choose \u201cEdit component data\u201d Here, you\u2019ll be able to re-phrase each one of the lines. The purpose of each line is written below the sample line. Make sure you edit all the lines, or at least make sure the wording suits your bot. Each line should make sense in the context of bot and conversation, and fit your bot\u2019s personality. Click \u201cSave\u201d Once you\u2019re done customizing ALL the lines (some components have more than one page, make sure you go over all the options) Click on the builder in the side nav, click anywhere in the project you\u2019d like to add your component to. Find your customized component and add to the project. Just don\u2019t forget to publish when done, you want the world to see your amazing bot, right? Customize directly from the builder Another option is to customize directly from the hub. You\u2019ll use this option if you already know exactly which component you want. Why? Because you won\u2019t be able to test it before - you\u2019ll jump right into editing. Ready? 3- 2 - 1, JUMP! Click anywhere in the builder. Search for a specific component or choose any component from the hub category. Right click one the node, and select \u201cCustomize component\u201d. Now choose an ID - name your component. \\ Super important: You won\u2019t be able to change the components name , so name it something you\u2019ll recognize and understand. Here, you\u2019ll be able to re-phrase each one of the lines. The purpose of each line is written below the sample line. Make sure you edit all the lines, or at least make sure the wording suits your bot. Each line should make sense in the context of bot and conversation, and fit your bot\u2019s personality. Click \u201cSave\u201d Once you\u2019re done customizing ALL the lines (some components have more than one page, make sure you go over all the options)","title":"Customize components"},{"location":"howtos/customize-comp/#how-to-customize-a-component","text":"There are 2 ways to customize an exciting component. You can do it directly from the builder, or by choosing the component and customizing it from the hub. Customize from the hub Click on the hub icon on the side nav and choose the component you want to customize. Here you can read the purpose of each component, and test it before you choose to use it. Choose the component you\u2019d like to customize. Click on Use and the bottom section of the window. Now choose an ID - name your component. \\ Super important: You won\u2019t be able to change the components name , so name it something you\u2019ll recognize and understand. Now, you\u2019ll find yourself in the y components\u201d section. Click on the 3 dots on the right side of your component. Choose \u201cEdit component data\u201d Here, you\u2019ll be able to re-phrase each one of the lines. The purpose of each line is written below the sample line. Make sure you edit all the lines, or at least make sure the wording suits your bot. Each line should make sense in the context of bot and conversation, and fit your bot\u2019s personality. Click \u201cSave\u201d Once you\u2019re done customizing ALL the lines (some components have more than one page, make sure you go over all the options) Click on the builder in the side nav, click anywhere in the project you\u2019d like to add your component to. Find your customized component and add to the project. Just don\u2019t forget to publish when done, you want the world to see your amazing bot, right? Customize directly from the builder Another option is to customize directly from the hub. You\u2019ll use this option if you already know exactly which component you want. Why? Because you won\u2019t be able to test it before - you\u2019ll jump right into editing. Ready? 3- 2 - 1, JUMP! Click anywhere in the builder. Search for a specific component or choose any component from the hub category. Right click one the node, and select \u201cCustomize component\u201d. Now choose an ID - name your component. \\ Super important: You won\u2019t be able to change the components name , so name it something you\u2019ll recognize and understand. Here, you\u2019ll be able to re-phrase each one of the lines. The purpose of each line is written below the sample line. Make sure you edit all the lines, or at least make sure the wording suits your bot. Each line should make sense in the context of bot and conversation, and fit your bot\u2019s personality. Click \u201cSave\u201d Once you\u2019re done customizing ALL the lines (some components have more than one page, make sure you go over all the options)","title":"How to Customize a component"},{"location":"howtos/dialogflow-video/","text":"How to Connect your Dialogflow bot to a face on Zoom We all have dialogs during our lives, right? Some of us even built bots on a platform called Dialogflow. Let\u2019s say you know one of them, or maybe you\u2019re this person (we\u2019re not judgemental) and now you want to connect the Dialogflow chatbot to one of our publishing channels, such as Zoom. Whatcha gonna do? The Dialogflow Part On Dialogflow Essentials , go to the left navigation bar, and at the top of it, pick the chatbot that you want to transfer. Click on the wheel near its name (a.k.a: Settings). Under Google project on the next page, see the Project ID row? There's a Google Cloud link there. Click on it. Now, open the left menu and pick IAM & Admin , then click on Service Accounts Find the relevant service account (it will be an email address with the relevant account name; under Name, you need to have \u201cApp Engine default service account\u201d) Click on the three dots on the right of the same row, then click on Manage Keys in the drill-down menu. Click on Add Key , then pick Create new key \\ Pick Json , then Create The json is downloaded to your computer. The CoCoHub Part Go to My Components on the left navigation bar, then click the + sign on the top right corner, then click Using Dialogflow agent in the drilldown menu \u201cClick to select or drag&drop service-account JSON file\u201d, then upload the json file you downloaded. Give your chatbot a component ID, description, name, goal. Under Categories, pick one of our predefined categories (Sales and Info, Small Talk, etc), pick a language, then click \u201cSave\u201d Your chatbot flow is ready! Now connect it to Zoom the regular way, as we explained here.","title":"Connect a dialogflow agent to a face"},{"location":"howtos/dialogflow-video/#how-to-connect-your-dialogflow-bot-to-a-face-on-zoom","text":"We all have dialogs during our lives, right? Some of us even built bots on a platform called Dialogflow. Let\u2019s say you know one of them, or maybe you\u2019re this person (we\u2019re not judgemental) and now you want to connect the Dialogflow chatbot to one of our publishing channels, such as Zoom. Whatcha gonna do?","title":"How to Connect your Dialogflow bot to a face on Zoom"},{"location":"howtos/dialogflow-video/#the-dialogflow-part","text":"On Dialogflow Essentials , go to the left navigation bar, and at the top of it, pick the chatbot that you want to transfer. Click on the wheel near its name (a.k.a: Settings). Under Google project on the next page, see the Project ID row? There's a Google Cloud link there. Click on it. Now, open the left menu and pick IAM & Admin , then click on Service Accounts Find the relevant service account (it will be an email address with the relevant account name; under Name, you need to have \u201cApp Engine default service account\u201d) Click on the three dots on the right of the same row, then click on Manage Keys in the drill-down menu. Click on Add Key , then pick Create new key \\ Pick Json , then Create The json is downloaded to your computer.","title":"The Dialogflow Part"},{"location":"howtos/dialogflow-video/#the-cocohub-part","text":"Go to My Components on the left navigation bar, then click the + sign on the top right corner, then click Using Dialogflow agent in the drilldown menu \u201cClick to select or drag&drop service-account JSON file\u201d, then upload the json file you downloaded. Give your chatbot a component ID, description, name, goal. Under Categories, pick one of our predefined categories (Sales and Info, Small Talk, etc), pick a language, then click \u201cSave\u201d Your chatbot flow is ready! Now connect it to Zoom the regular way, as we explained here.","title":"The CoCoHub Part"},{"location":"howtos/navigation/","text":"How to use \u201cnavigation\u201d based on user\u2019s input So, after nailing the part where the chatbot speaks - the \u201cSay\u201d - now we go to the Navigation - the part in the conversation when the user speaks. Our role, as conversation designers, is to smoothly lead the user into saying what we planned (Happy Path). Generally, as in life in general, we need to be prepared for anything. 1. Left-click on the canvas and click on the navigation node Navigation nodes can be operated in two ways: Intents and Keywords. 2. 1. Intents So, intents are collections of semantically similar utterances that basically mean the same thing in a conversation. For example, \u201cYes\u201d is a word, but \u201cYeah!\u201d, \u201cSure\u201d, \u201cYESSS\u201d and \u201cYup\u201d also mean the same thing, and we should embrace them as well. On CoCoHub\u2019s studio, we have 5 intents - click on the needed one Yes - the user answers in a positive way No - the user answers in a negative way Continue - the user asks the chatbot to go on Stop - the user asks the chatbot to abort the conversation Wildcard - an option in which every input by the user is valid, and yields the same response. What is it good for? Here are two examples: When you need the user\u2019s opinion or answer for data-collection purposes - and the scope of answers is too wide (\u201cWhat\u2019s your favourite travel destination in the world?\u201d) When you don\u2019t really need the user\u2019s data at that point - but you want to make the user feel involved and engaged (\u201cHow was your day?\u201d) 2. 2. Keywords Keywords are the way to go when you expect the user to answer with a specific word, sentence or phrase; if the user won\u2019t respond with these words, the conversation can be unfruitful. For example, if you have a pet shop and you serve only people with dogs, cats and fish (which covers almost 99% of the pets owned in the USA), your chatbot can relate only to those people and filter out all the rest. With keyword, you can design a different flow for every keyword or phrase Or put all of them in the same keywords space, if you want to have the same flow from there onwards for all those keywords. CoCo Tip If you\u2019re choosing keywords, make sure you put all the relevant words and synonyms there, so you won\u2019t miss anything that can fit - for example, if you write \u201ccat\u201d as an option, make sure you have \u201ccats\u201d and \u201cfeline\u201d there too.","title":"Navigate based on user's input"},{"location":"howtos/navigation/#how-to-use-navigation-based-on-users-input","text":"So, after nailing the part where the chatbot speaks - the \u201cSay\u201d - now we go to the Navigation - the part in the conversation when the user speaks. Our role, as conversation designers, is to smoothly lead the user into saying what we planned (Happy Path). Generally, as in life in general, we need to be prepared for anything.","title":"How to use \u201cnavigation\u201d based on user\u2019s input"},{"location":"howtos/navigation/#1-left-click-on-the-canvas-and-click-on-the-navigation-node","text":"Navigation nodes can be operated in two ways: Intents and Keywords.","title":"1. Left-click on the canvas and click on the navigation node"},{"location":"howtos/navigation/#2-1-intents","text":"So, intents are collections of semantically similar utterances that basically mean the same thing in a conversation. For example, \u201cYes\u201d is a word, but \u201cYeah!\u201d, \u201cSure\u201d, \u201cYESSS\u201d and \u201cYup\u201d also mean the same thing, and we should embrace them as well. On CoCoHub\u2019s studio, we have 5 intents - click on the needed one Yes - the user answers in a positive way No - the user answers in a negative way Continue - the user asks the chatbot to go on Stop - the user asks the chatbot to abort the conversation Wildcard - an option in which every input by the user is valid, and yields the same response. What is it good for? Here are two examples: When you need the user\u2019s opinion or answer for data-collection purposes - and the scope of answers is too wide (\u201cWhat\u2019s your favourite travel destination in the world?\u201d) When you don\u2019t really need the user\u2019s data at that point - but you want to make the user feel involved and engaged (\u201cHow was your day?\u201d)","title":"2. 1. Intents"},{"location":"howtos/navigation/#2-2-keywords","text":"Keywords are the way to go when you expect the user to answer with a specific word, sentence or phrase; if the user won\u2019t respond with these words, the conversation can be unfruitful. For example, if you have a pet shop and you serve only people with dogs, cats and fish (which covers almost 99% of the pets owned in the USA), your chatbot can relate only to those people and filter out all the rest. With keyword, you can design a different flow for every keyword or phrase Or put all of them in the same keywords space, if you want to have the same flow from there onwards for all those keywords.","title":"2. 2. Keywords"},{"location":"howtos/navigation/#coco-tip","text":"If you\u2019re choosing keywords, make sure you put all the relevant words and synonyms there, so you won\u2019t miss anything that can fit - for example, if you write \u201ccat\u201d as an option, make sure you have \u201ccats\u201d and \u201cfeline\u201d there too.","title":"CoCo Tip"},{"location":"howtos/parameters/","text":"How to use parameters We all have memory. We remember names, faces, numbers, addresses, tastes. Chatbots have memory too: Everything that is written by your user in a conversation is recorded in a log. It enables you to improve the conversation, but also to collect information that is important for your goal and for making the most out of your chatbot. These pieces of information are what we call \u201cInputs\u201d. Let\u2019s say that you run a website for Classic Rock legends merchandise, and you want to know what\u2019s your user\u2019s favourite rock band to be able to offer them the coolest T-Shirts and caps. When you build a chatbot, you can have any conversation you want, but in the end you\u2019ll need basically two things: The user\u2019s details To know what is his favourite rock band These inputs - pieces of info - will be written by the user into the chatbot\u2019s \u201cmemory\u201d. Some of them are already included in our conversational components, so you don\u2019t even need to create them. So... 1. How do you find an input? Let\u2019s say that you used the \u201cAddress\u201d component to get a user\u2019s home address - It collects the address for you, so you don\u2019t have to write anything! So how do you know how the input that was collected is called? In the right lower corner, test your chatbot After you confirming the input to the chatbot, it\u2019s in the chatbot\u2019s memory Hover with the mouse over the testing area A little \u201cBubble\u201d will appear, with the input\u2019s name and the details you gave it This is the input\u2019s name! Write it down, we\u2019ll need it later. But let\u2019s say that you want an input that doesn\u2019t exist in the system yet, such as \u201cuser\u2019s favourite rock band\u201d. Let\u2019s go for it! 2. How do you create an input? Pick a \u201cSay\u201d node from the menu Write in it a question that serves your chatbot's purpose (let\u2019s say, \u201cHey cool friend, what band rocks your world?\u201d) Pick a \u201cNavigation\u201d node from the menu Connect a line starting from the previous \u201cSay\u201d to the Navigation node Inside the navigation, pick \u201cIntents\u201d or \u201cKeywords\u201d (If you don\u2019t know what\u2019s the difference, go to the \u201cNavigation\u201d tutorial. Pick your needed intent, or write in the specific keywords. Pick a \"Save input\" node from the menu and connect the Navigation node to it Write your input's name inside the inspector (for example, \u201crockband\u201d). It will appear on the node itself. Now, what happens? The chatbot asks the visitor \u201cwhat band rocks your world?\u201d; the user answers; you get the input. Bang! You with us, right? This way, you can collect multiple inputs during a conversation. Imagine that now you want to know what\u2019s your user\u2019s favourite song of the rock band. Or favourite album. Or a lyrics line. Or who\u2019s the favourite band member. But hey, you didn\u2019t even know the name of the rock band before the conversation started. That\u2019s when \u201cInputs\u201d come to help us! It\u2019s like magic! Let\u2019s see how to use them now, to bring further engagement. 3. How do you use an input you collected? Here\u2019s when things are looking a bit code-y. But they\u2019re not. Don\u2019t run away! It\u2019s quite basic. Now, there\u2019s a secret formula I want to share with you. Don\u2019t tell it to anybody.. Ok, kidding, tell everybody. BE THAT PERSON. It\u2019s called ${context.????} and that\u2019s the way to use, or recall, a component. The \u201c context \u201d means that we want to use the input as part of the conversation\u2019s context The ???? is the name of the input you just did in part 1, like \u201crockband\u201d So what do you need to write to use it? Right, ${context.rockband} And the chatbot will \u201cremember\u201d the user\u2019s input and will replace this formula with the band\u2019s name! For example, you can continue the flow with another Say node like \u201cWow, ${context.rockband} really rocks! What\u2019s your favourite album?\u201d, or \u201cFantastic! Now, what\u2019s your favourite song by ${context.rockband} ?\u201d, or \u201cAmazing! Who is ${context.rockband} \u2019s favourite member?\u201d You can also use it in the email summary. Here\u2019s how to do it: In the \u201cSend email\u201d component, remind yourself what you wanted to achieve by getting this user\u2019s input - for example, \u201cFavourite Rock Band: Continue with the secret formula, for example, ${context.rockband}","title":"Use Parameters"},{"location":"howtos/parameters/#how-to-use-parameters","text":"We all have memory. We remember names, faces, numbers, addresses, tastes. Chatbots have memory too: Everything that is written by your user in a conversation is recorded in a log. It enables you to improve the conversation, but also to collect information that is important for your goal and for making the most out of your chatbot. These pieces of information are what we call \u201cInputs\u201d. Let\u2019s say that you run a website for Classic Rock legends merchandise, and you want to know what\u2019s your user\u2019s favourite rock band to be able to offer them the coolest T-Shirts and caps. When you build a chatbot, you can have any conversation you want, but in the end you\u2019ll need basically two things: The user\u2019s details To know what is his favourite rock band These inputs - pieces of info - will be written by the user into the chatbot\u2019s \u201cmemory\u201d. Some of them are already included in our conversational components, so you don\u2019t even need to create them. So...","title":"How to use parameters"},{"location":"howtos/parameters/#1-how-do-you-find-an-input","text":"Let\u2019s say that you used the \u201cAddress\u201d component to get a user\u2019s home address - It collects the address for you, so you don\u2019t have to write anything! So how do you know how the input that was collected is called? In the right lower corner, test your chatbot After you confirming the input to the chatbot, it\u2019s in the chatbot\u2019s memory Hover with the mouse over the testing area A little \u201cBubble\u201d will appear, with the input\u2019s name and the details you gave it This is the input\u2019s name! Write it down, we\u2019ll need it later. But let\u2019s say that you want an input that doesn\u2019t exist in the system yet, such as \u201cuser\u2019s favourite rock band\u201d. Let\u2019s go for it!","title":"1. How do you find an input?"},{"location":"howtos/parameters/#2-how-do-you-create-an-input","text":"Pick a \u201cSay\u201d node from the menu Write in it a question that serves your chatbot's purpose (let\u2019s say, \u201cHey cool friend, what band rocks your world?\u201d) Pick a \u201cNavigation\u201d node from the menu Connect a line starting from the previous \u201cSay\u201d to the Navigation node Inside the navigation, pick \u201cIntents\u201d or \u201cKeywords\u201d (If you don\u2019t know what\u2019s the difference, go to the \u201cNavigation\u201d tutorial. Pick your needed intent, or write in the specific keywords. Pick a \"Save input\" node from the menu and connect the Navigation node to it Write your input's name inside the inspector (for example, \u201crockband\u201d). It will appear on the node itself. Now, what happens? The chatbot asks the visitor \u201cwhat band rocks your world?\u201d; the user answers; you get the input. Bang! You with us, right? This way, you can collect multiple inputs during a conversation. Imagine that now you want to know what\u2019s your user\u2019s favourite song of the rock band. Or favourite album. Or a lyrics line. Or who\u2019s the favourite band member. But hey, you didn\u2019t even know the name of the rock band before the conversation started. That\u2019s when \u201cInputs\u201d come to help us! It\u2019s like magic! Let\u2019s see how to use them now, to bring further engagement.","title":"2. How do you create an input?"},{"location":"howtos/parameters/#3-how-do-you-use-an-input-you-collected","text":"Here\u2019s when things are looking a bit code-y. But they\u2019re not. Don\u2019t run away! It\u2019s quite basic. Now, there\u2019s a secret formula I want to share with you. Don\u2019t tell it to anybody.. Ok, kidding, tell everybody. BE THAT PERSON. It\u2019s called ${context.????} and that\u2019s the way to use, or recall, a component. The \u201c context \u201d means that we want to use the input as part of the conversation\u2019s context The ???? is the name of the input you just did in part 1, like \u201crockband\u201d So what do you need to write to use it? Right, ${context.rockband} And the chatbot will \u201cremember\u201d the user\u2019s input and will replace this formula with the band\u2019s name! For example, you can continue the flow with another Say node like \u201cWow, ${context.rockband} really rocks! What\u2019s your favourite album?\u201d, or \u201cFantastic! Now, what\u2019s your favourite song by ${context.rockband} ?\u201d, or \u201cAmazing! Who is ${context.rockband} \u2019s favourite member?\u201d You can also use it in the email summary. Here\u2019s how to do it: In the \u201cSend email\u201d component, remind yourself what you wanted to achieve by getting this user\u2019s input - for example, \u201cFavourite Rock Band: Continue with the secret formula, for example, ${context.rockband}","title":"3. How do you use an input you collected?"},{"location":"howtos/sub-comps/","text":"How to use your own components in a chatbot You know those dolls, in which you open a doll to find another one inside, then a smaller one, then a smaller one? So this is another way to look at building a chatbot: you can build sub-components, then use them over and over in a bigger chatbot. Let\u2019s say you\u2019re having a car company and you want to build a flow for family cars, one for luxury cars and one for 4X4 cars. Do you need to create 3 different chatbots? Not really. Just build a flow called \u201cfamily cars\u201d, a second one called \u201cluxury cars\u201d, and a third one called \u201c4X4 cars\u201d. Those will be your sub-components. They, and every other component you\u2019ll use in a chatbot, will be colored in purple. When writing the full chatbot, start your conversational flow by asking the person what is the type of car they\u2019re looking for - then, just direct them to the different flows. After they finish the relevant flow, you can continue from all different flows together to set an appointment with your sales team to close the deal! Every chatbot you build is a component that can be a sub-component of another chatbot. For example, let\u2019s say that you\u2019re very rich and you run multiple car rental companies - \u201cmycar\u201d, \u201cyourcar\u201d and \u201courcar\u201d. So in the beginning, you can ask the customer to choose between those 3 car rental companies - and if the customer wants \u201cmycar\u201d, this whole chatbot you\u2019ve just created is a sub-component of the big chatbot.","title":"Build and use sub components"},{"location":"howtos/sub-comps/#how-to-use-your-own-components-in-a-chatbot","text":"You know those dolls, in which you open a doll to find another one inside, then a smaller one, then a smaller one? So this is another way to look at building a chatbot: you can build sub-components, then use them over and over in a bigger chatbot. Let\u2019s say you\u2019re having a car company and you want to build a flow for family cars, one for luxury cars and one for 4X4 cars. Do you need to create 3 different chatbots? Not really. Just build a flow called \u201cfamily cars\u201d, a second one called \u201cluxury cars\u201d, and a third one called \u201c4X4 cars\u201d. Those will be your sub-components. They, and every other component you\u2019ll use in a chatbot, will be colored in purple. When writing the full chatbot, start your conversational flow by asking the person what is the type of car they\u2019re looking for - then, just direct them to the different flows. After they finish the relevant flow, you can continue from all different flows together to set an appointment with your sales team to close the deal! Every chatbot you build is a component that can be a sub-component of another chatbot. For example, let\u2019s say that you\u2019re very rich and you run multiple car rental companies - \u201cmycar\u201d, \u201cyourcar\u201d and \u201courcar\u201d. So in the beginning, you can ask the customer to choose between those 3 car rental companies - and if the customer wants \u201cmycar\u201d, this whole chatbot you\u2019ve just created is a sub-component of the big chatbot.","title":"How to use your own components in a chatbot"},{"location":"howtos/channels/alexa/","text":"How to publish a bot to an Alexa Smart speakers are everywhere. Right? You can find escape rooms, trivia games, fun facts and even \u201cAlexa reads mean girls quotes\u201d. Try it on October 3rd. Here\u2019s how you connect your bot to Alexa: Build your chatbot Click on Channels, on the left side of the builder Click on \u201cAlexa\u201d Login to your Amazon account Click on \u201cAllow\u201d","title":"Publish to Alexa"},{"location":"howtos/channels/alexa/#how-to-publish-a-bot-to-an-alexa","text":"Smart speakers are everywhere. Right? You can find escape rooms, trivia games, fun facts and even \u201cAlexa reads mean girls quotes\u201d. Try it on October 3rd. Here\u2019s how you connect your bot to Alexa: Build your chatbot Click on Channels, on the left side of the builder Click on \u201cAlexa\u201d Login to your Amazon account Click on \u201cAllow\u201d","title":"How to publish a bot to an Alexa"},{"location":"howtos/channels/audiocodes/","text":"How to publish a bot to phone by AudioCodes Hello? Is it me you\u2019re looking for? Sometimes, your customers are looking for you, and you\u2019re just not available. Wherever it will be the different time zones, or just someone calling after office hours, you want to be able to communicate with them, via phone. Here\u2019s how you do it, using AudioCodes: Build your chatbot Click on Channels, on the left side of the builder Click on \u201cPhone by AudioCodes\u201d Now you\u2019ll be transported (Hold on to your seat!) to the AudioCodes platform registration page. Register here. Check your inbox. Open your confirmation email, and click on the link inside. It will take you places. (And by places we mean - the AudioCodes page) Click on the \u201cClick to log in\u201d on the left side of the window Log into your AudioCodes Fill in your bot name, and click on \u201cApply and close\u201d Now you\u2019ll find yourself back on the builder. To manage, acquire or change your phone numbers, click \u201cManage\u201d","title":"Publish to Audiocodes"},{"location":"howtos/channels/audiocodes/#how-to-publish-a-bot-to-phone-by-audiocodes","text":"Hello? Is it me you\u2019re looking for? Sometimes, your customers are looking for you, and you\u2019re just not available. Wherever it will be the different time zones, or just someone calling after office hours, you want to be able to communicate with them, via phone. Here\u2019s how you do it, using AudioCodes: Build your chatbot Click on Channels, on the left side of the builder Click on \u201cPhone by AudioCodes\u201d Now you\u2019ll be transported (Hold on to your seat!) to the AudioCodes platform registration page. Register here. Check your inbox. Open your confirmation email, and click on the link inside. It will take you places. (And by places we mean - the AudioCodes page) Click on the \u201cClick to log in\u201d on the left side of the window Log into your AudioCodes Fill in your bot name, and click on \u201cApply and close\u201d Now you\u2019ll find yourself back on the builder. To manage, acquire or change your phone numbers, click \u201cManage\u201d","title":"How to publish a bot to phone by AudioCodes"},{"location":"howtos/channels/facebook/","text":"How to publish a chatbot to a Facebook page Everyone knows you need a facebook page for your business. It\u2019s like having your number listed on the phone book (Remember phone books? That was A WHILE ago!). But instead of just having your number in the book - have your brand communicate your customers 24/7 - using your own chatbot. Build your chatbot Click on Channels, on the left side of the builder Click on \u201cFacebook\u201d Click on \u201cContinue with Facebook\u201d Login to your Facebook account and click on \u201cContinue as..(Your name)\u201d Choose the page you want to bring to life using the CoCoHub chatbot Click \u201cDone\u201d at the bottom, \u201cPublish and close\u201d Now you can try it, by clicking \u201cTry it\u201d","title":"Publish to Facebook"},{"location":"howtos/channels/facebook/#how-to-publish-a-chatbot-to-a-facebook-page","text":"Everyone knows you need a facebook page for your business. It\u2019s like having your number listed on the phone book (Remember phone books? That was A WHILE ago!). But instead of just having your number in the book - have your brand communicate your customers 24/7 - using your own chatbot. Build your chatbot Click on Channels, on the left side of the builder Click on \u201cFacebook\u201d Click on \u201cContinue with Facebook\u201d Login to your Facebook account and click on \u201cContinue as..(Your name)\u201d Choose the page you want to bring to life using the CoCoHub chatbot Click \u201cDone\u201d at the bottom, \u201cPublish and close\u201d Now you can try it, by clicking \u201cTry it\u201d","title":"How to publish a chatbot to a Facebook page"},{"location":"howtos/channels/phone/","text":"How to connect your chatbot to a phone number You were sent to create an awesome chatbot. You did it. You answered the call! Now all is left is to create it to a phone number, so your chatbot can answer the call. On the right top corner, under channels, you will find a \u201cphone\u201d option. Click on it. The following screen will be opened: Choose the language you need Choose the voice you want (male/female) Choose the country you want to have your phone number at, out of dozens of options Choose a phone number out of the variety you\u2019ll have Click \u201cSave\u201d. Hurray! Your chatbot is connected to a phone. You can call it and speak to it. It was THAT simple, we know. Now go bring yourself something to drink. You earned it.","title":"Publish to Phone"},{"location":"howtos/channels/phone/#how-to-connect-your-chatbot-to-a-phone-number","text":"You were sent to create an awesome chatbot. You did it. You answered the call! Now all is left is to create it to a phone number, so your chatbot can answer the call. On the right top corner, under channels, you will find a \u201cphone\u201d option. Click on it. The following screen will be opened: Choose the language you need Choose the voice you want (male/female) Choose the country you want to have your phone number at, out of dozens of options Choose a phone number out of the variety you\u2019ll have Click \u201cSave\u201d. Hurray! Your chatbot is connected to a phone. You can call it and speak to it. It was THAT simple, we know. Now go bring yourself something to drink. You earned it.","title":"How to connect your chatbot to a phone number"},{"location":"howtos/channels/telegram/","text":"How to publish your chatbot on Telegram So, your chatbot\u2019s conversational flow is ready! You rock! Now let\u2019s go and publish it on one of the world\u2019s most popular messaging platforms: Telegram. First, go to the channels on the right top corner, then choose... Telegram! (That part is simple, we know). But now there\u2019s a pop-up that asks you for a TOKEN, threatening to throw your whole existence into a downward spiral. That\u2019s what you need to do now: One row above, there\u2019s a sentence: Not sure how to create a bot on Telegram? Click Here But we\u2019re here to explain, right? So, Go to your Telegram app (Desktop or Mobile, doesn\u2019t matter)\u2019s search window Search for the BotFather - it\u2019s an offer you can\u2019t refuse (Literally. That\u2019s the only way to publish your chatbot there) In the chat with botfather, write /newbot The botfather will answer: Alright, a new bot. How are we going to call it? Please choose a name for your bot . Give a name for your chatbot. For example, \u201cWizard of oz\u201d The botfather will answer: Good. Now let's choose a username for your bot. It must end in bot . Like this, for example: TetrisBot or tetris_bot. Give a username for your chatbot, that ends with \u201cbot\u201d. For example, \u201cwizardofozzzzbot\u201d The botfather will congratulate you and give you two important things: the link to start chatting with your bot (in blue) and the link to the token (in red). Imagine that you\u2019re a raging bull and look for the red token. Copy it Go back to CoCoHub and paste the token, then click \u201cSave\u201d Wait 3 seconds, and watch the lower left corner, until you have a \u201cChannel Created\u201d green notification popping up, followed by a pop-up announcing that your Telegram bot is alive. Go back to your telegram, and click on the link provided by the botfather Talk to your chatbot on Telegram like there\u2019s no tomorrow! If you\u2019re updating your chatbot, you don\u2019t need to go through all of it again - just finish updating, and click \u201cupdate\u201d.","title":"Publish to Telegram"},{"location":"howtos/channels/telegram/#how-to-publish-your-chatbot-on-telegram","text":"So, your chatbot\u2019s conversational flow is ready! You rock! Now let\u2019s go and publish it on one of the world\u2019s most popular messaging platforms: Telegram. First, go to the channels on the right top corner, then choose... Telegram! (That part is simple, we know). But now there\u2019s a pop-up that asks you for a TOKEN, threatening to throw your whole existence into a downward spiral. That\u2019s what you need to do now: One row above, there\u2019s a sentence:","title":"How to publish your chatbot on Telegram"},{"location":"howtos/channels/telegram/#not-sure-how-to-create-a-bot-on-telegram-click-here","text":"But we\u2019re here to explain, right? So, Go to your Telegram app (Desktop or Mobile, doesn\u2019t matter)\u2019s search window Search for the BotFather - it\u2019s an offer you can\u2019t refuse (Literally. That\u2019s the only way to publish your chatbot there) In the chat with botfather, write /newbot The botfather will answer: Alright, a new bot. How are we going to call it? Please choose a name for your bot . Give a name for your chatbot. For example, \u201cWizard of oz\u201d The botfather will answer: Good. Now let's choose a username for your bot. It must end in bot . Like this, for example: TetrisBot or tetris_bot. Give a username for your chatbot, that ends with \u201cbot\u201d. For example, \u201cwizardofozzzzbot\u201d The botfather will congratulate you and give you two important things: the link to start chatting with your bot (in blue) and the link to the token (in red). Imagine that you\u2019re a raging bull and look for the red token. Copy it Go back to CoCoHub and paste the token, then click \u201cSave\u201d Wait 3 seconds, and watch the lower left corner, until you have a \u201cChannel Created\u201d green notification popping up, followed by a pop-up announcing that your Telegram bot is alive. Go back to your telegram, and click on the link provided by the botfather Talk to your chatbot on Telegram like there\u2019s no tomorrow! If you\u2019re updating your chatbot, you don\u2019t need to go through all of it again - just finish updating, and click \u201cupdate\u201d.","title":"Not sure how to create a bot on Telegram? Click Here"},{"location":"howtos/channels/website/","text":"How to publish a chatbot to your website You know the great quote by Bot Dylan, the famous botwriter? \u201cA Website without a chatbot is like dust in the wind\u201d? Ok, so you probably know by now that your website NEEDS a chatbot. Coincidentally, you already created a chatbot. Let\u2019s get it on your website. On the right upper corner, click on the \u201cChannels\u201d tab, then choose \u201cEmbedded\u201d. A pop-up will show, asking you to customize your chatbot. By the way, before you ask yourself or look around in confusion, \u201c Fab \u201d is the pop-up window of your chatbot on the website. Decide what will be the distance of your chatbot from the bottom and right sides of the screen in pixels. The default is 20 pixels. Take into account that different people have different screen resolutions. Decide the height and width of your chatbot\u2019s window, in pixels. The default is 500 pixels high and 300 pixels wide. Give your chatbot a name - this is the name that will appear on the top of the chatbot\u2019s window. Then you\u2019re asked to write \u201cThe first thing the bot says before user input\u201d - this is self-explanatory, isn\u2019t it? (Default is \u201cType anything to get started\u201d) Under Conversational language , don\u2019t write the name of language, but it\u2019s ISO code. An ISO (International Organization for Standardization - we know it\u2019s supposed to be IOS, but go figure) code is a 2-letters abbreviation for a language, like en for English, es for Spanish, ar for Arabic, etc. If you don\u2019t know your language\u2019s ISO code, look it up here . \\ There are some variations of the same language between different countries, such as en-gb (English-Great Britain) and en-us (English-United States). Then, check the boxes if you want \\ Your chat window to be permanently open (then, the user can\u2019t minimize it!) Your chatbot to be in a right-to-left direction (for example, in Arabic or Hebrew) If you want the chat window to start open (then, the user must click on it to start speaking) Congratulations! Your chatbot is ready to be embedded into your website. Now click the \u201ccopy embed code\u201d and it will provide you with an embed code on your clipboard. Paste it in your website HTML body, update your website, check that it\u2019s working Then, start partying around the office or your house with confetti! (This is mandatory. Ok, maybe not. But we highly recommend it)","title":"Publish to Website"},{"location":"howtos/channels/website/#how-to-publish-a-chatbot-to-your-website","text":"You know the great quote by Bot Dylan, the famous botwriter? \u201cA Website without a chatbot is like dust in the wind\u201d? Ok, so you probably know by now that your website NEEDS a chatbot. Coincidentally, you already created a chatbot. Let\u2019s get it on your website. On the right upper corner, click on the \u201cChannels\u201d tab, then choose \u201cEmbedded\u201d. A pop-up will show, asking you to customize your chatbot. By the way, before you ask yourself or look around in confusion, \u201c Fab \u201d is the pop-up window of your chatbot on the website. Decide what will be the distance of your chatbot from the bottom and right sides of the screen in pixels. The default is 20 pixels. Take into account that different people have different screen resolutions. Decide the height and width of your chatbot\u2019s window, in pixels. The default is 500 pixels high and 300 pixels wide. Give your chatbot a name - this is the name that will appear on the top of the chatbot\u2019s window. Then you\u2019re asked to write \u201cThe first thing the bot says before user input\u201d - this is self-explanatory, isn\u2019t it? (Default is \u201cType anything to get started\u201d) Under Conversational language , don\u2019t write the name of language, but it\u2019s ISO code. An ISO (International Organization for Standardization - we know it\u2019s supposed to be IOS, but go figure) code is a 2-letters abbreviation for a language, like en for English, es for Spanish, ar for Arabic, etc. If you don\u2019t know your language\u2019s ISO code, look it up here . \\ There are some variations of the same language between different countries, such as en-gb (English-Great Britain) and en-us (English-United States). Then, check the boxes if you want \\ Your chat window to be permanently open (then, the user can\u2019t minimize it!) Your chatbot to be in a right-to-left direction (for example, in Arabic or Hebrew) If you want the chat window to start open (then, the user must click on it to start speaking) Congratulations! Your chatbot is ready to be embedded into your website. Now click the \u201ccopy embed code\u201d and it will provide you with an embed code on your clipboard. Paste it in your website HTML body, update your website, check that it\u2019s working Then, start partying around the office or your house with confetti! (This is mandatory. Ok, maybe not. But we highly recommend it)","title":"How to publish a chatbot to your website"},{"location":"howtos/channels/wordpress/","text":"How to publish a chatbot to a Wordpress website There\u2019s a lot of things you didn\u2019t know about. For example, did you know that a person\u2019s blood vessels can circulate the Earth, more than once? Or that you can have a chatbot on your Wordpress site, just by adding a plugin in 2 minutes? We\u2019ll concentrate on the second fact, since we\u2019re dealing with chatbots. You understand us, right? So let\u2019s connect your chatbot to your site. On the right upper corner, click on the \u201cChannels\u201d tab, then choose \u201cWordpress\u201d, which, in turn, will take you to the Wordpress site and out of the hub. On your Wordpress dashboard, Go to your plugins tab. Search for the \u201cCoCoHub\u201d plugin Install and activate the plugin Under the plugin settings, set your bot\u2019s dimensions, distance from the sides of the screen, the name, the first thing it will say to trigger a response from the user, and the component\u2019s url - it can be found in cocohub\u2019s studio, by clicking on the clipboard icon in the top navigation bar. Also, add your email address, the bot\u2019s language (ISO code for language - like en for English, es for Spanish, ar for Arabic) If the bot\u2019s language is RTL (right-to-left), check the relevant box and set your bot component_url from cocohub.ai Use the shortcode [cocobot] to add it to your page To get more in depth instructions follow the tutorial here: https://docs.cocohub.ai/tutorials/wp_cocobot A pop-up will show, asking you to customize your chatbot. By the way, before you ask yourself or look around in confusion, \u201c Fab \u201d is the pop-up window of your chatbot on the website. Decide what will be the distance of your chatbot from the bottom and right sides of the screen in pixels. The default is 20 pixels. Take into account that different people have different screen resolutions. Decide the height and width of your chatbot\u2019s window, in pixels. The default is 500 pixels high and 300 pixels wide. Give your chatbot a name - this is the name that will appear on the top of the chatbot\u2019s window. Then you\u2019re asked to write \u201cThe first thing the bot says before user input\u201d - this is self-explanatory, isn\u2019t it? (Default is \u201cType anything to get started\u201d) Under Conversational language , don\u2019t write the name of language, but it\u2019s ISO code. An ISO (International Organization for Standardization - we know it\u2019s supposed to be IOS, but go figure) code is a 2-letters abbreviation for a language, like en for English, es for Spanish, ar for Arabic, etc. If you don\u2019t know your language\u2019s ISO code, look it up here . \\ There are some variations of the same language between different countries, such as en-gb (English-Great Britain) and en-us (English-United States). Then, check the boxes if you want \\ Your chat window to be permanently open (then, the user can\u2019t minimize it!) Your chatbot to be in a right-to-left direction (for example, in Arabic or Hebrew) If you want the chat window to start open (then, the user must click on it to start speaking) Congratulations! Your chatbot is ready to be embedded into your website. Now click the \u201ccopy embed code\u201d and it will provide you with an embed code on your clipboard. Paste it in your website HTML body, update your website, check that it\u2019s working Then, start partying around the office or your house with confetti! (This is mandatory. Ok, maybe not. But we highly recommend it)","title":"Publish to Wordpress Website"},{"location":"howtos/channels/wordpress/#how-to-publish-a-chatbot-to-a-wordpress-website","text":"There\u2019s a lot of things you didn\u2019t know about. For example, did you know that a person\u2019s blood vessels can circulate the Earth, more than once? Or that you can have a chatbot on your Wordpress site, just by adding a plugin in 2 minutes? We\u2019ll concentrate on the second fact, since we\u2019re dealing with chatbots. You understand us, right? So let\u2019s connect your chatbot to your site. On the right upper corner, click on the \u201cChannels\u201d tab, then choose \u201cWordpress\u201d, which, in turn, will take you to the Wordpress site and out of the hub. On your Wordpress dashboard, Go to your plugins tab. Search for the \u201cCoCoHub\u201d plugin Install and activate the plugin Under the plugin settings, set your bot\u2019s dimensions, distance from the sides of the screen, the name, the first thing it will say to trigger a response from the user, and the component\u2019s url - it can be found in cocohub\u2019s studio, by clicking on the clipboard icon in the top navigation bar. Also, add your email address, the bot\u2019s language (ISO code for language - like en for English, es for Spanish, ar for Arabic) If the bot\u2019s language is RTL (right-to-left), check the relevant box and set your bot component_url from cocohub.ai Use the shortcode [cocobot] to add it to your page To get more in depth instructions follow the tutorial here: https://docs.cocohub.ai/tutorials/wp_cocobot A pop-up will show, asking you to customize your chatbot. By the way, before you ask yourself or look around in confusion, \u201c Fab \u201d is the pop-up window of your chatbot on the website. Decide what will be the distance of your chatbot from the bottom and right sides of the screen in pixels. The default is 20 pixels. Take into account that different people have different screen resolutions. Decide the height and width of your chatbot\u2019s window, in pixels. The default is 500 pixels high and 300 pixels wide. Give your chatbot a name - this is the name that will appear on the top of the chatbot\u2019s window. Then you\u2019re asked to write \u201cThe first thing the bot says before user input\u201d - this is self-explanatory, isn\u2019t it? (Default is \u201cType anything to get started\u201d) Under Conversational language , don\u2019t write the name of language, but it\u2019s ISO code. An ISO (International Organization for Standardization - we know it\u2019s supposed to be IOS, but go figure) code is a 2-letters abbreviation for a language, like en for English, es for Spanish, ar for Arabic, etc. If you don\u2019t know your language\u2019s ISO code, look it up here . \\ There are some variations of the same language between different countries, such as en-gb (English-Great Britain) and en-us (English-United States). Then, check the boxes if you want \\ Your chat window to be permanently open (then, the user can\u2019t minimize it!) Your chatbot to be in a right-to-left direction (for example, in Arabic or Hebrew) If you want the chat window to start open (then, the user must click on it to start speaking) Congratulations! Your chatbot is ready to be embedded into your website. Now click the \u201ccopy embed code\u201d and it will provide you with an embed code on your clipboard. Paste it in your website HTML body, update your website, check that it\u2019s working Then, start partying around the office or your house with confetti! (This is mandatory. Ok, maybe not. But we highly recommend it)","title":"How to publish a chatbot to a Wordpress website"},{"location":"howtos/channels/zoom/","text":"How to publish a bot to Zoom In the past year, one video communication platform Zoom-ed into our lives. You can create a bot and connect it to Zoom, easily. Here\u2019s how. Build your chatbot Click on Channels, on the left side of the builder Click on \u201cZoom\u201d Here, in the \u201cZoom Channel Configuration\u201d you choose a few things Type in a bot name Select email address for your bot. (It can be it\u2019s name, your company\u2019s name or anything else you\u2019ll remember) Select an avatar Select a scene. This will be your bots background Select the language of the bot and voice. You can test the voices, to make sure you choose the perfect one Choose a wake phrase (at least one). This is what you\u2019ll say out loud, to start the conversation with your bot. Pay super close attention: This phrase should be simple and not punctuated. Good example: Wake up/ Get up ; Bad example: Supercalifragilisticexpialidocious! Choose a sleep phrase (same here. At least one). This is what you\u2019ll say to end the conversation with the bot. Same rules apply here, so keep it short and sweet, with NO punctuation Click \u201cSave\u201d Now, you have 2 options: \\ Click on \u201cInvite bot now\u201d. This will take you to an email, where you\u2019ll need to paste your Zoom call invite (So - open Zoom, create invite and paste in the email). You can invite your bot to a scheduled call, or an active call, going on right now. \\ Or 2. Click on \u201cCopy bot\u2019s email\u201d. Then, go to your Zoom call, click \u201cInvite\u201d and send the invite to your bot. No need to write anything in, or write an elaborate subject line. You can if you want, no judgment here! Admit your bot into the call Say the wake phrase, and start the conversation!","title":"Publish to Zoom"},{"location":"howtos/channels/zoom/#how-to-publish-a-bot-to-zoom","text":"In the past year, one video communication platform Zoom-ed into our lives. You can create a bot and connect it to Zoom, easily. Here\u2019s how. Build your chatbot Click on Channels, on the left side of the builder Click on \u201cZoom\u201d Here, in the \u201cZoom Channel Configuration\u201d you choose a few things Type in a bot name Select email address for your bot. (It can be it\u2019s name, your company\u2019s name or anything else you\u2019ll remember) Select an avatar Select a scene. This will be your bots background Select the language of the bot and voice. You can test the voices, to make sure you choose the perfect one Choose a wake phrase (at least one). This is what you\u2019ll say out loud, to start the conversation with your bot. Pay super close attention: This phrase should be simple and not punctuated. Good example: Wake up/ Get up ; Bad example: Supercalifragilisticexpialidocious! Choose a sleep phrase (same here. At least one). This is what you\u2019ll say to end the conversation with the bot. Same rules apply here, so keep it short and sweet, with NO punctuation Click \u201cSave\u201d Now, you have 2 options: \\ Click on \u201cInvite bot now\u201d. This will take you to an email, where you\u2019ll need to paste your Zoom call invite (So - open Zoom, create invite and paste in the email). You can invite your bot to a scheduled call, or an active call, going on right now. \\ Or 2. Click on \u201cCopy bot\u2019s email\u201d. Then, go to your Zoom call, click \u201cInvite\u201d and send the invite to your bot. No need to write anything in, or write an elaborate subject line. You can if you want, no judgment here! Admit your bot into the call Say the wake phrase, and start the conversation!","title":"How to publish a bot to Zoom"},{"location":"landing/devs/","text":"Chatbot Developers CoCoHub lets you find hosted, community-built conversational components for your bot. We index a diverse set of components, measure their availability and make them searchable, all to make it easy to find the perfect component for the task. In addition, our set of standards and SDKs make the integration work simple. You can use the existing integration for most instances or integrate once and get access to all of the components published on CoCoHub. Each component is meant to fulfill a specific purpose; for example, getting a piece of information from the user, helping the user accomplish a certain task, entertaining the user, or informing them of new and relevant information. You can call components through a simple unified, REST API that is easy to embed in your chatbot. Moreover, you can view all of the components you are using in your workspace, which monitors the number of API requests, latency, and error rates, among other metrics. Start Now: Check out how guides on how to use components in your platform of choice: link Start from scratch using one of our templates with integrations already working: link Explore CoCoHub to get ideas of what kind of components you can use: link Learn how to publish your own component: link to vendors page","title":"Chatbot Developers"},{"location":"landing/devs/#chatbot-developers","text":"CoCoHub lets you find hosted, community-built conversational components for your bot. We index a diverse set of components, measure their availability and make them searchable, all to make it easy to find the perfect component for the task. In addition, our set of standards and SDKs make the integration work simple. You can use the existing integration for most instances or integrate once and get access to all of the components published on CoCoHub. Each component is meant to fulfill a specific purpose; for example, getting a piece of information from the user, helping the user accomplish a certain task, entertaining the user, or informing them of new and relevant information. You can call components through a simple unified, REST API that is easy to embed in your chatbot. Moreover, you can view all of the components you are using in your workspace, which monitors the number of API requests, latency, and error rates, among other metrics.","title":"Chatbot Developers"},{"location":"landing/devs/#start-now","text":"Check out how guides on how to use components in your platform of choice: link Start from scratch using one of our templates with integrations already working: link Explore CoCoHub to get ideas of what kind of components you can use: link Learn how to publish your own component: link to vendors page","title":"Start Now:"},{"location":"landing/vendors/","text":"For Component Vendors CoCoHub lets you host and share your work with the chatbot builder community. We have the biggest repository for hosted conversational components in the world! Each component is intended to achieve a specific purpose; for example getting a piece of information from the user, help the user accomplish some task, entertain the user, or inform them of some relevant information. If you\u2019ve already built an intelligent bot of your own, we make it simple for you to distribute and monetize parts of it. Adding your component to CoCoHub has many advantages; You\u2019ll get instant exposure to our growing user base, a search-engine-optimized profile page for your component, as well as features like user management and billing services. Start now: Check out our toolkits to connect popluar platforms to CoCoHub: link Learn more about the API and how to connect new platforms: link","title":"For Component Vendors"},{"location":"landing/vendors/#for-component-vendors","text":"CoCoHub lets you host and share your work with the chatbot builder community. We have the biggest repository for hosted conversational components in the world! Each component is intended to achieve a specific purpose; for example getting a piece of information from the user, help the user accomplish some task, entertain the user, or inform them of some relevant information. If you\u2019ve already built an intelligent bot of your own, we make it simple for you to distribute and monetize parts of it. Adding your component to CoCoHub has many advantages; You\u2019ll get instant exposure to our growing user base, a search-engine-optimized profile page for your component, as well as features like user management and billing services.","title":"For Component Vendors"},{"location":"landing/vendors/#start-now","text":"Check out our toolkits to connect popluar platforms to CoCoHub: link Learn more about the API and how to connect new platforms: link","title":"Start now:"},{"location":"tutorials/alexa_skill_from_scratch/","text":"Steps: Choose one or more relevant components, using Cocohub's Bot Studio editor. Create a new Alexa Skill on CoCoHub's Alexa Skill Service. Configure your Alexa Skill. Get A Component As an example we'll create an Alexa Word Game Skill: Go to CoCoHub , sign Up and click Bot Studio on the left sidebar. Create a new component from the \"Word Games\" Template. Create Alexa Skill On Alexa Skill Service Press \"Channels\" on the app-bar. Choose \"Alexa\". Fill in the following fields: Polly Voice ID : The voice which the skill will use. Here are the available voices: Available Voices . End Statement : Skill response when users wishes to end the skill. Help Statement : Skill response will be returned on AMAZON. Help intent. Reprompt Statement : Will be skill's response when user did not response. Skill Invocation Name : The phrase which will invoke the skill. e.g. Alexa, open Jeopardy Configure Your Alexa Skill (At the Alexa Developer Console ) Place the generated endpoint url at the endpoint section. Upload the Skill JSON Editor.(Intents -> JSON Editor)","title":"Alexa skill from scratch"},{"location":"tutorials/alexa_skill_from_scratch/#steps","text":"Choose one or more relevant components, using Cocohub's Bot Studio editor. Create a new Alexa Skill on CoCoHub's Alexa Skill Service. Configure your Alexa Skill.","title":"Steps:"},{"location":"tutorials/alexa_skill_from_scratch/#get-a-component","text":"As an example we'll create an Alexa Word Game Skill: Go to CoCoHub , sign Up and click Bot Studio on the left sidebar. Create a new component from the \"Word Games\" Template.","title":"Get A Component"},{"location":"tutorials/alexa_skill_from_scratch/#create-alexa-skill-on-alexa-skill-service","text":"Press \"Channels\" on the app-bar. Choose \"Alexa\". Fill in the following fields: Polly Voice ID : The voice which the skill will use. Here are the available voices: Available Voices . End Statement : Skill response when users wishes to end the skill. Help Statement : Skill response will be returned on AMAZON. Help intent. Reprompt Statement : Will be skill's response when user did not response. Skill Invocation Name : The phrase which will invoke the skill. e.g. Alexa, open Jeopardy","title":"Create Alexa Skill On Alexa Skill Service"},{"location":"tutorials/alexa_skill_from_scratch/#configure-your-alexa-skill-at-the-alexa-developer-console","text":"Place the generated endpoint url at the endpoint section. Upload the Skill JSON Editor.(Intents -> JSON Editor)","title":"Configure Your Alexa Skill (At the Alexa Developer Console)"},{"location":"tutorials/authors_videos/","text":"Building a component on Rasa Create a conversational component using Rasa Building a component on Dialogflow Create a conversational component using Dialogflow Building a component on Cognigy Create a conversational component using Cognigy. How to become a Vendor and submit a new CoCo","title":"Authors videos"},{"location":"tutorials/authors_videos/#building-a-component-on-rasa","text":"Create a conversational component using Rasa","title":"Building a component on Rasa"},{"location":"tutorials/authors_videos/#building-a-component-on-dialogflow","text":"Create a conversational component using Dialogflow","title":"Building a component on Dialogflow"},{"location":"tutorials/authors_videos/#building-a-component-on-cognigy","text":"Create a conversational component using Cognigy.","title":"Building a component on Cognigy"},{"location":"tutorials/authors_videos/#how-to-become-a-vendor-and-submit-a-new-coco","text":"","title":"How to become a Vendor and submit a new CoCo"},{"location":"tutorials/developer_videos/","text":"Add a fallback CoCo to your Rasa bot How to integrate a Conversational Component (CoCo) in the Rasa Fallback trigger. Calling a CoCo from a Rasa bot Calling a CoCo from a Cognigy bot Use multiple CoCos in a Cognigy bot","title":"Developer videos"},{"location":"tutorials/developer_videos/#add-a-fallback-coco-to-your-rasa-bot","text":"How to integrate a Conversational Component (CoCo) in the Rasa Fallback trigger.","title":"Add a fallback CoCo to your Rasa bot"},{"location":"tutorials/developer_videos/#calling-a-coco-from-a-rasa-bot","text":"","title":"Calling a CoCo from a Rasa bot"},{"location":"tutorials/developer_videos/#calling-a-coco-from-a-cognigy-bot","text":"","title":"Calling a CoCo from a Cognigy bot"},{"location":"tutorials/developer_videos/#use-multiple-cocos-in-a-cognigy-bot","text":"","title":"Use multiple CoCos in a Cognigy bot"},{"location":"tutorials/facebook_channel/","text":"Requirements A Facebook Page Deployment Go to CoCohub's Facebook Channel. Login with Facebook. Select the page(s) that you would like to connect to a component. Paste the component ID in the Component ID field of the target page. Save the changes. Give it a try!","title":"Connect your component to facebook"},{"location":"tutorials/facebook_channel/#requirements","text":"A Facebook Page","title":"Requirements"},{"location":"tutorials/facebook_channel/#deployment","text":"Go to CoCohub's Facebook Channel. Login with Facebook. Select the page(s) that you would like to connect to a component. Paste the component ID in the Component ID field of the target page. Save the changes. Give it a try!","title":"Deployment"},{"location":"tutorials/manychat1/","text":"Use a conversational component in ManyChat At the following tutorial we'll create a flow for ManyChat that will implement Get Name component in it. Link to the final flow: namer_flow Create New Flow Choose Flows at the menu. Press On create flow at the right top corner. Create Action With External Request Create HTTP Request Action Create Action: Choose HTTP Request Action: Configure Action Request Link https://cocohub.ai/api/exchange/ [ CoCo Component ID ] / [ User ID ] Choose Component from CoCoHub . User ManyChat variable user_id. Request Body Use ManyChat Last Text Input variable {\"user_input\": [ Last Text Input ]} Parse Response Parse component response, extract the following variables: component_done - Boolean - True/False depends on if component complete it's goal. component_response - Text - Bot response. Send Component Response And Wait For User Replay. Create new node called Send Message . Choose user input feature at the node: Place component response variable as a bot message: Set Condition Set condition to check if the component done with it's purpose. If not redirect back to the HTTP request action. Create Condition: Set condition for component_done variable is false: Publish & Test Publish: Test:","title":"Add component to you ManyChat flow"},{"location":"tutorials/manychat1/#use-a-conversational-component-in-manychat","text":"At the following tutorial we'll create a flow for ManyChat that will implement Get Name component in it. Link to the final flow: namer_flow","title":"Use a conversational component in ManyChat"},{"location":"tutorials/manychat1/#create-new-flow","text":"Choose Flows at the menu. Press On create flow at the right top corner.","title":"Create New Flow"},{"location":"tutorials/manychat1/#create-action-with-external-request","text":"","title":"Create Action With External Request"},{"location":"tutorials/manychat1/#create-http-request-action","text":"Create Action: Choose HTTP Request Action:","title":"Create HTTP Request Action"},{"location":"tutorials/manychat1/#configure-action","text":"","title":"Configure Action"},{"location":"tutorials/manychat1/#request-link","text":"https://cocohub.ai/api/exchange/ [ CoCo Component ID ] / [ User ID ] Choose Component from CoCoHub . User ManyChat variable user_id.","title":"Request Link"},{"location":"tutorials/manychat1/#request-body","text":"Use ManyChat Last Text Input variable {\"user_input\": [ Last Text Input ]}","title":"Request Body"},{"location":"tutorials/manychat1/#parse-response","text":"Parse component response, extract the following variables: component_done - Boolean - True/False depends on if component complete it's goal. component_response - Text - Bot response.","title":"Parse Response"},{"location":"tutorials/manychat1/#send-component-response-and-wait-for-user-replay","text":"Create new node called Send Message . Choose user input feature at the node: Place component response variable as a bot message:","title":"Send Component Response And Wait For User Replay."},{"location":"tutorials/manychat1/#set-condition","text":"Set condition to check if the component done with it's purpose. If not redirect back to the HTTP request action. Create Condition: Set condition for component_done variable is false:","title":"Set Condition"},{"location":"tutorials/manychat1/#publish-test","text":"Publish: Test:","title":"Publish &amp; Test"},{"location":"tutorials/map_dialogFlow_intent_to_component/","text":"Map DialogFlow Intent To Component In the following tutorial we'll add a component into Dialogflow . The component will be triggered when a relevant intent matches. More specifically, we'll use the register component from the Hub . Here's what the end result looks like: Steps: Choose one or more relevant components using CoCoHub's Bot Studio editor. Create a new agent on CoCoHub's Dialogflow Service. Import CoCo intent from dedicated ZIP (Available on agent tag from the step above). Enable webhook in the Fulfillment section and set the url to be the endpoint from the steps above. Enable webhook call on the target intent. Get a component. Go to CoCoHub , sign Up. We'll use the register component register component Create Dialogflow Agent On CoCoHub's Dialogflow Service Press the \"Add An Agent\" button. Press the \"Add Intent/Component Pair\" to map the intent name to the component ID. Import ZIP CoCo Intent To Your Agent Download the intent ZIP file from the dialogflow service. Go to Agent settings. Go to \"Export And Import\". Press Import and choose the downloaded ZIP file. Enable webhook in the Fulfillment Section Go to the Fulfillment section. Press on enable webhook. Set the url to be the endpoint from the dialogflow CoCoHub's service. Enable webhook call On The Target Intent. Go to the target intent. Scroll to the bottom and press the enable webhook call.","title":"Map DialogFlow Intent To Component"},{"location":"tutorials/map_dialogFlow_intent_to_component/#map-dialogflow-intent-to-component","text":"In the following tutorial we'll add a component into Dialogflow . The component will be triggered when a relevant intent matches. More specifically, we'll use the register component from the Hub . Here's what the end result looks like:","title":"Map DialogFlow Intent To Component"},{"location":"tutorials/map_dialogFlow_intent_to_component/#steps","text":"Choose one or more relevant components using CoCoHub's Bot Studio editor. Create a new agent on CoCoHub's Dialogflow Service. Import CoCo intent from dedicated ZIP (Available on agent tag from the step above). Enable webhook in the Fulfillment section and set the url to be the endpoint from the steps above. Enable webhook call on the target intent.","title":"Steps:"},{"location":"tutorials/map_dialogFlow_intent_to_component/#get-a-component","text":"Go to CoCoHub , sign Up. We'll use the register component register component","title":"Get a component."},{"location":"tutorials/map_dialogFlow_intent_to_component/#create-dialogflow-agent-on-cocohubs-dialogflow-service","text":"Press the \"Add An Agent\" button. Press the \"Add Intent/Component Pair\" to map the intent name to the component ID.","title":"Create Dialogflow Agent On CoCoHub's Dialogflow Service"},{"location":"tutorials/map_dialogFlow_intent_to_component/#import-zip-coco-intent-to-your-agent","text":"Download the intent ZIP file from the dialogflow service. Go to Agent settings. Go to \"Export And Import\". Press Import and choose the downloaded ZIP file.","title":"Import ZIP CoCo Intent To Your Agent"},{"location":"tutorials/map_dialogFlow_intent_to_component/#enable-webhook-in-the-fulfillment-section","text":"Go to the Fulfillment section. Press on enable webhook. Set the url to be the endpoint from the dialogflow CoCoHub's service.","title":"Enable webhook in the Fulfillment Section"},{"location":"tutorials/map_dialogFlow_intent_to_component/#enable-webhook-call-on-the-target-intent","text":"Go to the target intent. Scroll to the bottom and press the enable webhook call.","title":"Enable webhook call On The Target Intent."},{"location":"tutorials/rasa/","text":"","title":"Rasa"},{"location":"tutorials/use_a_component_with_dialogflow_external/","text":"Calling a CoCo from Dialogflow (Externally) In the following tutorial we'll build a banking bot, using Dialogflow banking prebuilt agent and CoCo the 'Register' component from the CoCo Marketplace . I'll guide you thorough the whole process, including the implementation of the CoCo 'Register' component. Setup Prebuilt Bot On Dialogflow: Create a Dialogflow account. Go to the prebuilt agents menu: Choose banking agent: Import banking agent: Authentication With Dialogflow(Service Account Key): Extract agent service account key: Go to agent settings. Go to service accounts: Generate JSON key: Place it in code sample directory as service_accout.json: Code Sample Overview: We'll use a Flask application to expose our bot throut an API. For communication with Dialogflow we'll use Dialogflow SDK and for communication with the CoCo component we'll use CoCo SDK. Code to code sample repository: https://github.com/ConversationalComponents/webinar/tree/master/py Flow: Global Variable current_comp: MAIN_COMP = \"default\" # Current component on which the session is running. current_comp = MAIN_COMP The current_comp global variable will be \"default\" when the conversation is controlled by Dialogflow. When the control is passed to a CoCo component the value of the current_comp variable will be the CoCo component ID which is in control of the conversation right now. CoCo And Dialogflow Access Functions: Dialogflow and CoCo request wrapped with process functions. Let's take a look at the process_dialogflow function: def process_dialogflow ( session_id , text , language_code = \"en\" ): \"\"\" Returns bot output for user input. Using the same `session_id` between requests allows continuation of the conversation. Arguments: session_id (string): Current session ID. text (string): User input. language_code (string): Context language. Returns: Return tuple intent_name, bot_output (tuple). \"\"\" session = session_client . session_path ( project_id , session_id ) text_input = dialogflow . types . TextInput ( text = text , language_code = language_code ) query_input = dialogflow . types . QueryInput ( text = text_input ) response = session_client . detect_intent ( session = session , query_input = query_input ) return response . query_result . intent . display_name , response . query_result . fulfillment_text The function receives the session_id and user input then returns intent display name and response text. And there is the process_coco function: def process_coco ( component_id , session_id , input_text ): \"\"\" Process user input at a coco component. Arguments: component_id (string): Target component ID. session_id (string): Target session ID. input_text (string): User input text. Returns: CoCo component output. (string) \"\"\" component = ConversationalComponent ( component_id ) return component ( session_id = session_id , user_input = input_text ) The function receives CoCo component ID, session ID and user input. The answer will be the component output. /input Endpoint: At the our app.py file we will implement /input endpoint, which will receive user_input at the payload process the input and return bot response.(Will be implemented at the \"implement Component In Conversation Flow\" topic.) Choose And Add Component: Access marketplace: https://marketplace.conversationalcomponents.com/ Choose the 'Register' component: Add Component: Implement Component In Conversation Flow: @app . route ( \"/input\" , methods = [ \"POST\" ]) def get_input (): global current_comp request_data = request . get_json () or {} user_input = request_data . get ( \"user_input\" ) Send user input to Dialogflow. # Get response from DialogFlow for user input. intent_name , bot_output = process_dialogflow ( session_id = CURRENT_SESSION_ID , text = user_input ) Choose a relevant intent which will trigger the control pass to a CoCo component: The relevant intent for registration is \"account.open\". # If catch intent, give control to CoCo component. if intent_name == \"account.open\" : current_comp = \"register_vp3\" if current_comp == \"register_vp3\" : # Fetch response from CoCo if intent catch. coco_response = process_coco ( component_id = \"register_vp3\" , session_id = CURRENT_SESSION_ID , input_text = user_input ) When component is done, pass the conversation control back to Dialogflow: # If component done, return the control to the main flow. if coco_response . component_done : current_comp = MAIN_COMP bot_output = coco_response . response return jsonify ({ \"response\" : bot_output }), 200 , {} Run And Test The Bot: pip install -r requirements.txt flask run try the bot at 127.0.0.1:5000","title":"Calling a CoCo from Dialogflow (Externally)"},{"location":"tutorials/use_a_component_with_dialogflow_external/#calling-a-coco-from-dialogflow-externally","text":"In the following tutorial we'll build a banking bot, using Dialogflow banking prebuilt agent and CoCo the 'Register' component from the CoCo Marketplace . I'll guide you thorough the whole process, including the implementation of the CoCo 'Register' component.","title":"Calling a CoCo from Dialogflow (Externally)"},{"location":"tutorials/use_a_component_with_dialogflow_external/#setup-prebuilt-bot-on-dialogflow","text":"Create a Dialogflow account. Go to the prebuilt agents menu: Choose banking agent: Import banking agent:","title":"Setup Prebuilt Bot On Dialogflow:"},{"location":"tutorials/use_a_component_with_dialogflow_external/#authentication-with-dialogflowservice-account-key","text":"Extract agent service account key: Go to agent settings. Go to service accounts: Generate JSON key: Place it in code sample directory as service_accout.json:","title":"Authentication With Dialogflow(Service Account Key):"},{"location":"tutorials/use_a_component_with_dialogflow_external/#code-sample-overview","text":"We'll use a Flask application to expose our bot throut an API. For communication with Dialogflow we'll use Dialogflow SDK and for communication with the CoCo component we'll use CoCo SDK. Code to code sample repository: https://github.com/ConversationalComponents/webinar/tree/master/py","title":"Code Sample Overview:"},{"location":"tutorials/use_a_component_with_dialogflow_external/#flow","text":"","title":"Flow:"},{"location":"tutorials/use_a_component_with_dialogflow_external/#global-variable-current_comp","text":"MAIN_COMP = \"default\" # Current component on which the session is running. current_comp = MAIN_COMP The current_comp global variable will be \"default\" when the conversation is controlled by Dialogflow. When the control is passed to a CoCo component the value of the current_comp variable will be the CoCo component ID which is in control of the conversation right now.","title":"Global Variable current_comp:"},{"location":"tutorials/use_a_component_with_dialogflow_external/#coco-and-dialogflow-access-functions","text":"Dialogflow and CoCo request wrapped with process functions. Let's take a look at the process_dialogflow function: def process_dialogflow ( session_id , text , language_code = \"en\" ): \"\"\" Returns bot output for user input. Using the same `session_id` between requests allows continuation of the conversation. Arguments: session_id (string): Current session ID. text (string): User input. language_code (string): Context language. Returns: Return tuple intent_name, bot_output (tuple). \"\"\" session = session_client . session_path ( project_id , session_id ) text_input = dialogflow . types . TextInput ( text = text , language_code = language_code ) query_input = dialogflow . types . QueryInput ( text = text_input ) response = session_client . detect_intent ( session = session , query_input = query_input ) return response . query_result . intent . display_name , response . query_result . fulfillment_text The function receives the session_id and user input then returns intent display name and response text. And there is the process_coco function: def process_coco ( component_id , session_id , input_text ): \"\"\" Process user input at a coco component. Arguments: component_id (string): Target component ID. session_id (string): Target session ID. input_text (string): User input text. Returns: CoCo component output. (string) \"\"\" component = ConversationalComponent ( component_id ) return component ( session_id = session_id , user_input = input_text ) The function receives CoCo component ID, session ID and user input. The answer will be the component output.","title":"CoCo And Dialogflow Access Functions:"},{"location":"tutorials/use_a_component_with_dialogflow_external/#input-endpoint","text":"At the our app.py file we will implement /input endpoint, which will receive user_input at the payload process the input and return bot response.(Will be implemented at the \"implement Component In Conversation Flow\" topic.)","title":"/input Endpoint:"},{"location":"tutorials/use_a_component_with_dialogflow_external/#choose-and-add-component","text":"Access marketplace: https://marketplace.conversationalcomponents.com/ Choose the 'Register' component: Add Component:","title":"Choose And Add Component:"},{"location":"tutorials/use_a_component_with_dialogflow_external/#implement-component-in-conversation-flow","text":"@app . route ( \"/input\" , methods = [ \"POST\" ]) def get_input (): global current_comp request_data = request . get_json () or {} user_input = request_data . get ( \"user_input\" ) Send user input to Dialogflow. # Get response from DialogFlow for user input. intent_name , bot_output = process_dialogflow ( session_id = CURRENT_SESSION_ID , text = user_input ) Choose a relevant intent which will trigger the control pass to a CoCo component: The relevant intent for registration is \"account.open\". # If catch intent, give control to CoCo component. if intent_name == \"account.open\" : current_comp = \"register_vp3\" if current_comp == \"register_vp3\" : # Fetch response from CoCo if intent catch. coco_response = process_coco ( component_id = \"register_vp3\" , session_id = CURRENT_SESSION_ID , input_text = user_input ) When component is done, pass the conversation control back to Dialogflow: # If component done, return the control to the main flow. if coco_response . component_done : current_comp = MAIN_COMP bot_output = coco_response . response return jsonify ({ \"response\" : bot_output }), 200 , {}","title":"Implement Component In Conversation Flow:"},{"location":"tutorials/use_a_component_with_dialogflow_external/#run-and-test-the-bot","text":"pip install -r requirements.txt flask run try the bot at 127.0.0.1:5000","title":"Run And Test The Bot:"},{"location":"tutorials/videos/","text":"Your first time on CoCoHub? Let's show you around a bit so you get familiar enough to go solo. Customizing Components Is So Simple You can customize the response texts of a Conversational Component to match your bot's language and personality. Let's take it a step further: Use a CoCo in your bot Build a new Component","title":"Videos"},{"location":"tutorials/videos/#your-first-time-on-cocohub","text":"Let's show you around a bit so you get familiar enough to go solo.","title":"Your first time on CoCoHub?"},{"location":"tutorials/videos/#customizing-components-is-so-simple","text":"You can customize the response texts of a Conversational Component to match your bot's language and personality.","title":"Customizing Components Is So Simple"},{"location":"tutorials/videos/#lets-take-it-a-step-further","text":"Use a CoCo in your bot Build a new Component","title":"Let's take it a step further:"},{"location":"tutorials/wp_cocobot/","text":"Wordpress CoCoHub Tutorial In this tutorial we'll guide you through adding a chat window to a conversational bot on a Wordpress page as well as using CoCoHub visual editing tools to create your own bot from components. It's quick, easy, and lets you leverage powerful AI to engage your users. Installing CoCoHub plugin in Wordpress We'll start by opening our Wordpress dashboard, and selecting PLUGINS from the drawer. Click the ADD NEW button (marked in red oval). Search for CoCoHub in keywords, and click the INSTALL NOW button on the card (marked in red oval). Now we need to activate the plugin. Click the ACTIVATE button on the card. Great! The plugin is installed and activated. We still need to add the shortcode to the pages on which we would like our chat window to show. Let's go to a page in our Wordpress site and edit any field. Now add the [cocobot] shortcode and update the page. All done! If you navigate to the page you've just updated, you should see a chat window there. It's the interface to a Cocobot, the Conversational Components evangelist bot. You'll probably want to build your own bot, though, so let's get to that. Building a bot in CoCoHub Start by heading over to CoCoHub , and signing in or registering, if you're a first time user. Welcome! When you're ready, choose Bots Studio from the drawer, and click ADD to create a new bot. Now we should have something that looks like this: Glue works with Nodes and Links - nodes are containers for components, and links route conversation flow between components. Let's take a deeper look at the leftmost node: The gold star in the rightmost corner indicates that it's an Entry component. This is the first component the bot's user will converse with. There must always be an entry component in each Glue. The text field containing namer_vp3 is the components associated with this node. The default component is namer_vp3, but you can use any component from Cocohub here. Click on it to enter search mode. DRAG TO LINK button creates a link between nodes. We'll discuss this in greater detail below. This is what a couple of linked nodes look like. Incoming link from another node means that another node has an action on which conversation flow will route to this component. Outgoing link is a route from a node to a different one. This is what's created using the DRAG TO LINK button. Outgoing link controls allow you to change the outgoing link. The text field containing \"component done\" allows you to select the action on which routing to a different node will happen. The default action is \"component done\" - that is, when the component has achieved it's goal. You can also delete the link here. Non-entry node options is a menu of controls for a non-entry node - it allows you to set a node as entry or to delete it. Parameters is a collapsible field for components that have parameters associated with them. \"email_pv1\" component has them, and when expanded the parameters look like this: If an email is associated with your account, it'll be in the address field. This is the email address to which the results will be sent once the bot is finished. Warning If there is no email in the address field, you won't get the email! Last, but not least, the general Glue controls: Save and Undo buttons are only enabled if you can save or undo. Saving generates a new Glue ID, and resets the chat window. COPY GLUE ID button - copies the last saved Glue ID to your clipboard. Chat window is where you can talk to the latest saved version of your bot. Please note that if SAVE button is turned on, you have unsaved changes which will not be reflected in the chat. This bot will get the user's name, and when it's finished getting the name it'll also get the user's email address. Once all that is done, it'll send you an email with the user's details. Now we can save the changes ( SAVE button in the control panel ), and chat to our newly created bot in the chat window. Pro Tip Everything in Coco bots is made of components. The component for making a bot is called a Glue component - it glues other components together. Since a glue is also a component, you can use glue components as nodes in a glue! Nicely done! Time to use our new bot in the Cocohub Wordpress plugin. Let's save any changes we have, and click the COPY GLUE ID button. Now let's head back to Wordpress admin dashboard, and configure our plugin to use the Glued bot. Configuring CoCoHub Wordpress plugin Head over to Plugins, and click SETTINGS on CoCoHub plugin. Now we just to have to pass the ID of the Glue component we created into component-id or url field (marked in red oval), and click SAVE CHANGES. All done! Head back to the page to which you inserted [cocobot] shortcode, and chat with your Glued bot from the comfort of your Wordpress site. Or change the other settings first: Name is the name that'll appear in the header of your bot's chat window Bot Greeting is what the bot will say to user when the chat window fist loads Height and Width define the dimensions of your bot's chat window Is Fabless is a checkbox for whether the chat window has a close/open button or not. When it's on, the chat window cannot be closed. Chat-window is open by default is a checkbox for whether the chat window starts opened. Only relevant if Is Fabless is off. That concludes the tutotial. Hopefully it'll put you on the path to making awesome, useful, engaging and fantastic bots!","title":"Build a modular bot on wordpress"},{"location":"tutorials/wp_cocobot/#wordpress-cocohub-tutorial","text":"In this tutorial we'll guide you through adding a chat window to a conversational bot on a Wordpress page as well as using CoCoHub visual editing tools to create your own bot from components. It's quick, easy, and lets you leverage powerful AI to engage your users.","title":"Wordpress CoCoHub Tutorial"},{"location":"tutorials/wp_cocobot/#installing-cocohub-plugin-in-wordpress","text":"We'll start by opening our Wordpress dashboard, and selecting PLUGINS from the drawer. Click the ADD NEW button (marked in red oval). Search for CoCoHub in keywords, and click the INSTALL NOW button on the card (marked in red oval). Now we need to activate the plugin. Click the ACTIVATE button on the card. Great! The plugin is installed and activated. We still need to add the shortcode to the pages on which we would like our chat window to show. Let's go to a page in our Wordpress site and edit any field. Now add the [cocobot] shortcode and update the page. All done! If you navigate to the page you've just updated, you should see a chat window there. It's the interface to a Cocobot, the Conversational Components evangelist bot. You'll probably want to build your own bot, though, so let's get to that.","title":"Installing CoCoHub plugin in Wordpress"},{"location":"tutorials/wp_cocobot/#building-a-bot-in-cocohub","text":"Start by heading over to CoCoHub , and signing in or registering, if you're a first time user. Welcome! When you're ready, choose Bots Studio from the drawer, and click ADD to create a new bot. Now we should have something that looks like this: Glue works with Nodes and Links - nodes are containers for components, and links route conversation flow between components. Let's take a deeper look at the leftmost node: The gold star in the rightmost corner indicates that it's an Entry component. This is the first component the bot's user will converse with. There must always be an entry component in each Glue. The text field containing namer_vp3 is the components associated with this node. The default component is namer_vp3, but you can use any component from Cocohub here. Click on it to enter search mode. DRAG TO LINK button creates a link between nodes. We'll discuss this in greater detail below. This is what a couple of linked nodes look like. Incoming link from another node means that another node has an action on which conversation flow will route to this component. Outgoing link is a route from a node to a different one. This is what's created using the DRAG TO LINK button. Outgoing link controls allow you to change the outgoing link. The text field containing \"component done\" allows you to select the action on which routing to a different node will happen. The default action is \"component done\" - that is, when the component has achieved it's goal. You can also delete the link here. Non-entry node options is a menu of controls for a non-entry node - it allows you to set a node as entry or to delete it. Parameters is a collapsible field for components that have parameters associated with them. \"email_pv1\" component has them, and when expanded the parameters look like this: If an email is associated with your account, it'll be in the address field. This is the email address to which the results will be sent once the bot is finished. Warning If there is no email in the address field, you won't get the email! Last, but not least, the general Glue controls: Save and Undo buttons are only enabled if you can save or undo. Saving generates a new Glue ID, and resets the chat window. COPY GLUE ID button - copies the last saved Glue ID to your clipboard. Chat window is where you can talk to the latest saved version of your bot. Please note that if SAVE button is turned on, you have unsaved changes which will not be reflected in the chat. This bot will get the user's name, and when it's finished getting the name it'll also get the user's email address. Once all that is done, it'll send you an email with the user's details. Now we can save the changes ( SAVE button in the control panel ), and chat to our newly created bot in the chat window. Pro Tip Everything in Coco bots is made of components. The component for making a bot is called a Glue component - it glues other components together. Since a glue is also a component, you can use glue components as nodes in a glue! Nicely done! Time to use our new bot in the Cocohub Wordpress plugin. Let's save any changes we have, and click the COPY GLUE ID button. Now let's head back to Wordpress admin dashboard, and configure our plugin to use the Glued bot.","title":"Building a bot in CoCoHub"},{"location":"tutorials/wp_cocobot/#configuring-cocohub-wordpress-plugin","text":"Head over to Plugins, and click SETTINGS on CoCoHub plugin. Now we just to have to pass the ID of the Glue component we created into component-id or url field (marked in red oval), and click SAVE CHANGES. All done! Head back to the page to which you inserted [cocobot] shortcode, and chat with your Glued bot from the comfort of your Wordpress site. Or change the other settings first: Name is the name that'll appear in the header of your bot's chat window Bot Greeting is what the bot will say to user when the chat window fist loads Height and Width define the dimensions of your bot's chat window Is Fabless is a checkbox for whether the chat window has a close/open button or not. When it's on, the chat window cannot be closed. Chat-window is open by default is a checkbox for whether the chat window starts opened. Only relevant if Is Fabless is off. That concludes the tutotial. Hopefully it'll put you on the path to making awesome, useful, engaging and fantastic bots!","title":"Configuring CoCoHub Wordpress plugin"}]}